( hey kirie! )

|00 @System/vector $2 &expansion $2 &wst $1 &rst $1 &metadata $2 &r $2 &g $2 &b $2 &debug $1 &state $1
|10 @Console/vector $2 &read $1 &pad $4 &type $1 &write $1 &error $1
|a0 @File/vector $2 &success $1 &success-lb $1 &stat $2 &delete $1 &append $1 &name $2 &length $2 &read $2 &write $2

|000

	@rule/right $1
	@rule/depth $1
	@rule/inhibitor $1

|100

@on-reset ( -> )
	;meta #06 DEO2
	;repl/on-console .Console/vector DEO2
	BRK

@meta $1
	( name ) "Neur 0a
	( desc ) "Neural 20 "Nets 20 "Language 0a
	( auth ) "By 20 "Devine 20 "Lu 20 "Linvega 0a
	( date ) "31 20 "May 20 "2025 $2

@repl/on-console ( -> )
	[ LIT2 ". -Console/read ] DEI NEQk ?{
		rule/<parse>
		net/<fire>
		live/<eval>
		POP2 BRK }
	rule/<push-byte>
	POP BRK

%+Neuron/state ( neuron* -- /state* ) {
	;Neuron/state ADD2 }

%+Neuron/size ( neuron* -- /size* ) {
	;Neuron/size ADD2 }

%+Neuron/threshold ( neuron* -- /threshold* ) {
	;Neuron/threshold ADD2 }

%+Neuron/saturation ( neuron* -- /saturation* ) {
	;Neuron/saturation ADD2 }

(
@|Compiler )

@rule/<push-byte> ( c -- )
	#00 [ LIT2 &ptr =&buf ] INC2k ,&ptr STR2
	STA2
	JMP2r

@rule/<parse> ( -- )
	[ LIT2 00 -&right ] STZ
	[ LIT2 00 -&depth ] STZ
	[ LIT2 00 -&inhibitor ] STZ
	lhs/<init>
	rhs/<init>
	;&buf
	&>w
		LDAk [ LIT "* ] NEQ ?{ DUP2 /<bind-neuron> }
		LDAk [ LIT ": ] NEQ ?{ #00 /<bind> }
		LDAk [ LIT "; ] NEQ ?{ #01 /<bind> }
		INC2 LDAk ?&>w
	POP2
	( | reset )
	;&buf ,&ptr STR2
	( | when the rule has no RHS )
	.&depth LDZ ?{ !lhs/<fire> }
	( >> )

@rule/<connect> ( -- )
	/get-from-range
	( | infer threshold )
	[ SUB2k #01 SFT2 ,&threshold STR POP ]
	( | connect each )
	;&do-connect arr2/<foreach>
	.&right LDZ ?lhs/<init>
	!rhs/<init>

@rule/do-connect ( n* -- n* )
	LDA2k STH2
	/get-to-range
	&>lb
		EQU2k ?{
			( | set alive & threshold )
			LDA2k +Neuron/state LDAk .State/alive AND ?{
				[ LIT2 -State/alive &threshold $1 ] OVR2 STA2 }
			POP2
			( | bind )
			LDA2k STH2kr .&inhibitor LDZ neuron/<push-connection>
			INC2 INC2 !&>lb }
	POP2 POP2 POP2r JMP2r

@rule/<bind> ( inhi -- )
	[ LIT2 00 -&depth ] LDZ INCk .&depth STZ
	EQU ?{ /<connect> }
	[ LIT2 00 -&right ] LDZ EQU .&right STZ
	.&inhibitor STZ
	JMP2r

@rule/<bind-neuron> ( n* -- )
	neuron/rewind-name net/find-alloc
	( | pass allocated pointer )
	.&right LDZ ?rhs/<push-neuron>
	!lhs/<push-neuron>

@rule/get-from-range ( -- to* from* )
	.&right LDZ ?lhs/get-range
	!rhs/get-range

@rule/get-to-range ( -- to* from* )
	.&right LDZ ?rhs/get-range
	!lhs/get-range

@lhs/<init> ( -- )
	;&buf ,&ptr STR2
	JMP2r

@lhs/get-range ( -- to* from* )
	,&ptr LDR2 ;&buf JMP2r

@lhs/<push-neuron> ( n* -- )
	[ LIT2 &ptr =&buf ] INC2k INC2 ,&ptr STR2
	STA2
	JMP2r

@lhs/<fire> ( -- )
	/get-range ;&do-fire !arr2/<foreach>

@lhs/do-fire ( n* -- n* )
	LDA2k +Neuron/state [ LIT2 -State/alive-fire 01 ] SWP2 STA2
	JMP2r

@rhs/<init> ( -- )
	;&buf ,&ptr STR2
	JMP2r

@rhs/<push-neuron> ( n* -- )
	[ LIT2 &ptr =&buf ] INC2k INC2 ,&ptr STR2
	STA2
	JMP2r

@rhs/get-range ( -- to* from* )
	,&ptr LDR2 ;&buf JMP2r

@dict/push-word ( str* -- ptr* cap* )
	,&ptr LDR2 SWP2
	&>w
		LDAk [ LIT "* ] EQU ?&end
		LDAk [ LIT "/ ] EQU ?&end
		LDAk /<push-byte>
		INC2 LDAk ?&>w
	&end ( -- )
	#00
	( >> )

@dict/<push-byte> ( c -- )
	#00 [ LIT2 &ptr =&buf ] INC2k ,&ptr STR2
	STA2
	JMP2r

(
@|Runtime )

@net/find-alloc ( name* -- neuron* )
	LDAk [ LIT "* ] NEQ ?{ POP2 ;anon-name !/<push-name> }
	( | find neuron )
	STH2
	,&ptr LDR2 ;&buf
	&>lf
		EQU2k ?{
			LDA2k STH2kr SWP2 str/compare ?{ POP2r NIP2 JMP2r }
			+Neuron/size !&>lf }
	POP2 POP2
	( | allocate neuron )
	STH2r dict/push-word
	( | set threshold manually )
	LDAk [ LIT "/ ] NEQ ?{
		( get value ) INC2k LDA [ LIT "0 ] SUB .State/alive SWP
		( save ) ,&ptr LDR2 +Neuron/state STA2 }
	POP2
	( >> )

@net/<push-name> ( name* -- neuron* )
	[ LIT2 &ptr =&buf ] DUP2 +Neuron/size ,&ptr STR2
	STA2k NIP2 JMP2r

@net/<fire> ( -- )
	,&ptr LDR2 ;&buf
	&>lk
		EQU2k ?{
			DUP2 +Neuron/state LDA .State/alive-fire NEQ ?{
				( push ) DUP2 live/<push-neuron> }
			+Neuron/size !&>lk }
	POP2 POP2 JMP2r

@live/<push-neuron> ( n* -- )
	STH2
	( | find neuron )
	,&ptr LDR2 ;&buf
	&>lf
		EQU2k ?{
			LDA2k STH2kr NEQ2 ?{
				( already in list ) POP2 POP2 POP2r JMP2r }
			INC2 INC2 !&>lf }
	POP2 POP2 STH2r
	( | push neuron )
	[ LIT2 &ptr =&buf ] INC2k INC2 ,&ptr STR2
	STA2
	JMP2r

@live/<eval> ( -- )
	[ LIT2 00 _&step ] STR
	&>w
		,&ptr LDR2 ;&buf EQU2 ?{
			[ LIT2 80 &step $1 ] INCk ,&step STR
			/<step>
			NEQ ?&>w }
	JMP2r

@live/<step> ( -- )
	excited/<init>
	dirty/<init>
	,&ptr LDR2 ;&buf ;&do-step arr2/<foreach>
	#0a19 DEO
	( | reset )
	;&buf ,&ptr STR2
	excited/<preserve> !dirty/<clean>

@live/do-step ( n* -- n* )
	LDA2k DUP2 neuron/<print-name> !neuron/<send>

@excited/<init> ( -- )
	;&buf ,&ptr STR2
	JMP2r

@excited/<push-neuron> ( n* -- )
	[ LIT2 &ptr =&buf ] INC2k INC2 ,&ptr STR2
	STA2
	JMP2r

@excited/<preserve> ( -- )
	,&ptr LDR2 ;&buf ;&do-preserve !arr2/<foreach>

@excited/do-preserve ( n* -- n* )
	LDA2k +Neuron/state LDA .State/inhibited AND ?{
		( live ) LDA2k !live/<push-neuron> }
	JMP2r

@dirty/<init> ( -- )
	;&buf ,&ptr STR2
	JMP2r

@dirty/<push-neuron> ( n* -- n* )
	DUP2 [ LIT2 &ptr =&buf ] INC2k INC2 ,&ptr STR2
	STA2
	JMP2r

@dirty/<clean> ( -- )
	,&ptr LDR2 ;&buf ;&do-clean !arr2/<foreach>

@dirty/do-clean ( n* -- n* )
	LDA2k DUP2 +Neuron/state .State/alive ROT ROT STA
	+Neuron/saturation #00 ROT ROT STA
	JMP2r

@neuron/send-exci ( n* -- n* )
	LDA2k dirty/<push-neuron>
	DUP2 +Neuron/saturation LDAk INC ROT ROT STA
	DUP2 +Neuron/threshold LDA2 GTH ?{ DUP2 excited/<push-neuron> }
	POP2 JMP2r

@neuron/send-inhi ( n* -- n* )
	LDA2k dirty/<push-neuron>
	+Neuron/state .State/alive-inhibited ROT ROT STA
	JMP2r

@neuron/rewind-name ( str* -- )
	#0001 SUB2 LDAk
	( | handlers )
	DUP #21 LTH ?&end
	DUP [ LIT "* ] EQU ?&end
	DUP [ LIT ": ] EQU ?&end
	DUP [ LIT "; ] EQU ?&end
	POP !/rewind-name
	&end POP INC2 JMP2r

@neuron/<send> ( n* -- )
	( | no threshold are always excited )
	DUP2 +Neuron/threshold LDA ?{ DUP2 excited/<push-neuron> }
	( | send to connections )
	DUP2 ;Neuron/inhi /get-bounds ;&send-inhi arr2/<foreach>
	;Neuron/exci /get-bounds ;&send-exci !arr2/<foreach>

@neuron/<push-connection> ( b* a* inhibitor -- )
	/get-array ADD2
	( put neuron ) STH2k LDA2k DUP2 ADD2 INC2 INC2 ADD2 STA2
	( inc length ) STH2r LDA2k INC2 SWP2 STA2
	JMP2r

@neuron/get-bounds ( neuron* array* -- to* from* )
	ADD2 LDA2k DUP2 ADD2 SWP2 INC2 INC2 STH2k ADD2 STH2r JMP2r

@neuron/get-array ( inhibitor -- array* )
	?{ ;Neuron/exci JMP2r }
	;Neuron/inhi JMP2r

@neuron/<print-name> ( neuron* -- )
	LDA2k str/<print>
	[ LIT2 "/ 19 ] DEO
	+Neuron/threshold LDA #0f AND [ LIT "0 ] ADD #19 DEO
	#2019 DEO
	JMP2r

(
@|etc )

@str/compare ( s* n* -- false )
	STH2
	&>w
		LDAk LDAkr STHr NEQ ?{ INC2 INC2r LDAk ?&>w }
	LDA LDAr STHr ?{
		( ) DUP [ LIT "* ] NEQ
		( ) SWP [ LIT "/ ] NEQ AND JMP2r }
	POP #01 JMP2r

@str/<print> ( str* -- )
	LDAk #19 DEO
	INC2 LDAk ?/<print>
	POP2 JMP2r

@arr2/<foreach> ( to* from* fn* -- )
	STH2
	&>l
		EQU2k ?{
			STH2kr JSR2 INC2 INC2 !&>l }
	POP2 POP2 POP2r JMP2r

(
@|assets )

@anon-name "* $1

@lhs/buf $40

@rhs/buf $40

@excited/buf $40

@dirty/buf $40

@live/buf $40

@rule/buf $200

@dict/buf $4000

@net/buf
|00 @Neuron/name $2 &state $1 &threshold $1 &saturation $1
	( len, [n*,n*..] ) &inhi &inhi/len $2 &inhi/buf $1e
	( len, [n*,n*..] ) &exci &exci/len $2 &exci/buf $1e &size
|01 @State/alive
|02 @State/inhibited
|03 @State/alive-inhibited
|05 @State/alive-fire

