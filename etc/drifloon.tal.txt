( cat input.tal | uxncli drifloon.rom > output.rom )

|00 @System/vector $2 &expansion $2 &wst $1 &rst $1 &metadata $2 &r $2 &g $2 &b $2 &debug $1 &state $1
|10 @Console/vector $2 &read $1 &pad $4 &type $1 &write $1 &error $1
|00 @RefType &ab $1 &as $1 &rb $1 &rs $1
|00 @SymType $40 &used $40 &declared

|000

	@token/buf $2f &cap $1
	@scope/buf $2f &cap $1

|100

@on-reset ( -> )
	;meta #06 DEO2
	;dict/reset scope/<set-label>
	;on-console .Console/vector DEO2
	BRK

@on-console ( -> )
	.Console/read DEI token/<push-byte>
	[ LIT2 04 -Console/type ] DEI EQU ?{ BRK }
	refs/<resolve-all>
	.System/state DEI ?{ rom/<finish> }
	BRK

@rom/<finish> ( -- )
	( +length ) [ LIT2 &length $2 ]
	( +labels ) syms/<summary>
	;dict/assembled <pstr>
	;rom/length LDA2 #0100 SUB2 <pdec>
	;dict/bytes <pstr>
	( -labels ) <pdec>
	;dict/labels <pstr>
	( | output )
	( -length ) ;rom/mem ADD2 ;rom/output
	&>l ( -- )
		LDAk #18 DEO
		INC2 GTH2k ?&>l
	POP2 POP2
	( | success )
	[ LIT2 80 -System/state ] DEO
	JMP2r

@runes/lut [
	"| =lib/padabs "$ =lib/padrel "@ =lib/toplab "& =lib/sublab
	"% =lib/macros "( =lib/coment ", =lib/litrel "_ =lib/rawrel
	". =lib/litzep "- =lib/rawzep "; =lib/litabs "= =lib/rawabs
	"? =lib/litjci "! =lib/litjmi "# =lib/lithex "" =lib/rawstr
	5b =lib/ignore 5d =lib/ignore "} =lib/lambda ] $1

@meta $1
	( name ) "Drifloon 0a
	( desc ) "Uxntal 20 "Assembler 0a
	( auth ) "By 20 "Devine 20 "Lu 20 "Linvega 0a
	( date ) "5 20 "Mar 20 "2025 $2

( Core )

@<set-error-ref> ( adj* name* -- )
	[ LIT2 &ref $2 ] #0003 ADD2 !<set-error>

@<set-error-token> ( adj* name* -- )
	;token/buf
	( >> )

@<set-error> ( adj* name* keyword* -- )
	SWP2 <pstr>
	#2019 DEO
	SWP2 <pstr>
	[ LIT2 ": 19 ] DEO
	#2019 DEO
	<pstr>
	;dict/in <pstr>/
	;scope/buf <pstr>/
	#0a19 DEO
	[ LIT2 01 -System/state ] DEO
	JMP2r

(
@|Buffers )

@token/<new> ( -- )
	[ LIT2 -&buf _&ptr ] STR
	[ LIT2 00 -&buf ] STZ
	JMP2r

@token/<push-byte> ( c -- )
	DUP #20 GTH ?{
		POP ;&buf LDZk ?{ POP2 JMP2r }
		[ LIT2 &mode =asm-default ] JSR2 !/<new> }
	( | append )
	[ LIT2 00 &ptr -&buf ]
	( overflow ) DUP .&cap EQU ?{ INCk ,&ptr STR }
	STZ2
	JMP2r

@scope/<push-byte> ( c -- )
	[ LIT2 00 &ptr -&buf ] INCk ,&ptr STR
	( overflow ) DUP .&cap LTH ?{ ;dict/exceeded ;dict/Symbol ;&buf <set-error> }
	STZ2
	JMP2r

@scope/<set-label> ( str* -- )
	[ LIT2 -&buf _&ptr ] STR
	&>w ( -- )
		LDAk [ LIT "/ ] EQU ?{
			LDAk /<push-byte>
			INC2 LDAk ?&>w }
	POP2 ,&ptr LDR ,&anchor STR
	JMP2r

@scope/make-name ( name* -- scope/label* )
	[ LIT2 &anchor $1 _&ptr ] STR
	[ LIT "/ ] /<push-byte>
	&>wl ( -- )
		LDAk /<push-byte>
		INC2 LDAk ?&>wl
	POP2 ;&buf JMP2r

(
@|Assembly )

@<set-default> ( -- )
	;asm-default ;token/mode STA2
	JMP2r

@asm-default ( t* -- )
	LDZk runes/find INC2k ORA ?{
		POP2
		( hex ) is-hex ?rom/<write-rawhex>
		( mac ) DUP2 macros/find INC2k ORA ?rom/<write-macro>
		( opc ) POP2 opcodes/find INCk ?rom/<write-opcode>
		( imm ) POP !lib/litjsi }
	INC2 LDA2 JMP2

@<set-comment> ( -- )
	;asm-comment ;token/mode STA2
	[ LIT2 01 _asm-comment/depth ] STR
	JMP2r

@asm-comment ( t* -- )
	[ LITr &depth $1 ] LDA2 DUP2
	( | nested comments )
	[ LIT2 ") 00 ] NEQ2 ?{ LITr 01 SUBr }
	[ LIT2 "( 00 ] NEQ2 ?{ INCr }
	STHkr [ LITr _&depth ] STRr
	?{ !<set-default> }
	JMP2r

@<set-macro> ( -- )
	;asm-macro ;token/mode STA2
	[ LIT2 00 _asm-macro/depth ] STR
	JMP2r

@asm-macro ( t* -- )
	[ LITr &depth $1 ] LDAk
	( | nested lambdas )
	[ LIT "} ] NEQ ?{
		[ LITr 01 ] SUBr STHkr ?{
			#00 macros/<push-byte>
			POP2 POPr !<set-default> } }
	STHkr #00 EQU ?{ ;token/buf macros/<push-word> }
	LDA [ LIT "{ ] NEQ ?{ INCr }
	[ LITr _&depth ] STRr
	JMP2r

@lib/ignore POP2 JMP2r
	&padabs INC2 refs/get-any !rom/<set-head>
	&padrel INC2 refs/get-any !rom/<set-head-rel>
	&toplab INC2 DUP2 scope/<set-label> !syms/<new>
	&sublab INC2 scope/make-name !syms/<new>
	&litrel #80 rom/<write-byte> &rawrel INC2 refs/get-rb !rom/<write-byte>
	&litzep #80 rom/<write-byte> &rawzep INC2 refs/get-ab !rom/<write-byte>
	&litabs #a0 rom/<write-byte> &rawabs INC2 refs/get-as !rom/<write-short>
	&litjci INC2 #20 !rom/<write-call>
	&litjmi INC2 #40 !rom/<write-call>
	&litjsi #60 !rom/<write-call>
	&lithex INC2 !rom/<write-lithex>
	&rawstr INC2 !rom/<write-str>
	&lambda POP2 !lambda/pop
	&coment POP2 !<set-comment>
	&macros INC2 !macros/<new>

(
@|Lambda )

@lambda/make-name ( -- name* )
	[ LIT &count $1 ] INCk ,&count STR
	DUP [ LIT2 &ptr =&mem ] INC2k ,&ptr STR2
	STA
	( >> )

@lambda/name ( id -- str* )
	hexs ,&id STR2
	;&sym JMP2r

@lambda/pop ( -- )
	,&ptr LDR2 #0001 SUB2 LDAk /name syms/<new>
	,&ptr STR2
	JMP2r
	&sym cebb &id 0000 $1

(
@|Macros )

@macros/<new> ( name* -- name* )
	DUP2 /find INC2 ORA ?{
		DUP2 syms/find INC2 ORA ?{ macros/<push-word> !<set-macro> } }
	POP2 ;dict/duplicate ;dict/Macro !<set-error-token>

@macros/find ( name* -- <addr>* )
	STH2
	,&ptr LDR2 ;&mem
	&>l ( -- )
		DUP2 STH2kr wcmp ?{
			scap/ GTH2k ?&>l
		POP2 #ffff }
	NIP2 POP2r JMP2r

@macros/<push-word> ( t* -- )
	LDAk /<push-byte>
	INC2 LDAk ?&<push-word>
	POP2 #20
	( >> )

@macros/<push-byte> ( byte -- )
	[ LIT2 &ptr =&mem ] INC2k ,&ptr STR2
	STA
	( | check overflow )
	,&ptr LDR2 ;&mem-end LTH2 ?{
		( ! ) ;dict/exceeded ;dict/Macros !<set-error-token> }
	JMP2r

(
@|Syms )

@syms/<new> ( name* -- )
	DUP2 macros/find INC2 ORA ?&duplicate
	DUP2 /find INC2k ORA ?{
		( alloc ) POP2 .SymType/declared rom/get-head !/<push> }
	( | name* sym* -- )
	INC2k INC2 LDA .SymType/declared AND ?{
		( addr* ) rom/get-head OVR2 STA2
		( type ) INC2 INC2 LDAk .SymType/declared ORA ROT ROT STA
		( name* ) POP2 JMP2r }
	POP2
	&duplicate ( name* -- )
	POP2
	( ! ) ;dict/duplicate ;dict/Symbol !<set-error-token>

@syms/find ( name* -- <addr>* )
	STH2
	;&ptr LDA2 ;&mem
	&>l ( -- )
		DUP2 #0003 ADD2 STH2kr wcmp ?{
			#0003 ADD2 scap/ GTH2k ?&>l
		POP2 #ffff }
	NIP2 POP2r JMP2r

@syms/find-alloc ( name* -- <addr>* )
	DUP2 /find INC2k ORA ?{
		( null* -> ptr* ) POP2 ,&ptr LDR2
		( alloc ) OVR2 .SymType/used #ffff /<push> }
	NIP2 JMP2r

@syms/<push> ( name* type addr* -- )
	( hb ) SWP /<push-byte>
	( lb ) /<push-byte>
	( type ) /<push-byte>
	is-hex ?&invalid
	( is runic ) LDAk runes/find INC2 ORA ?&invalid
	( is opcode ) opcodes/find INC ?&invalid
	( >> )

@syms/<push-string> ( word* -- )
	LDAk /<push-byte>
	INC2 LDAk ?&<push-string>
	LDA
	( >> )

@syms/<push-byte> ( byte -- )
	[ LIT2 &ptr =&mem ] INC2k ,&ptr STR2
	STA
	( | check overflow )
	,&ptr LDR2 ;&mem-end LTH2 ?{
		( ! ) ;dict/exceeded ;dict/Symbols !<set-error-token> }
	JMP2r

@syms/invalid ( name* -- )
	/<push-string>
	( ! ) ;dict/invalid ;dict/Symbol !<set-error-token>

@syms/<summary> ( -- )
	[ LIT2r ffff ] ;&ptr LDA2 ;&mem
	&>ls ( -- )
		( used ) INC2k INC2 LDA .SymType/used AND ?{
			( upper ) DUP2 #0003 ADD2 LDAk [ LIT "A ] SUB #1a LTH ?{
				;dict/unused <pstr>
				DUP2 <pstr>/
				#0a19 DEO }
			POP2 }
		INC2r #0003 ADD2 scap/ GTH2k ?&>ls
	POP2 POP2 STH2r JMP2r

(
@|References )

@refs/get-any ( str* -- value* )
	is-hex ?shex
	!/get-ref

@refs/get-type ( token* type -- addr* )
	,&type STR
	( >> )

@refs/get-ref ( token* -- addr* )
	LDA2k [ LIT2 "{ 00 ] NEQ2 ?{ POP2 lambda/make-name }
	LDAk [ LIT "/ ] NEQ ?{ INC2 scope/make-name }
	LDAk [ LIT "& ] NEQ ?{ INC2 scope/make-name }
	( | find symbol or create it )
	syms/find-alloc
	( | check if declared )
	INC2k INC2 STH2k LDA .SymType/declared AND ?{
		STH2k [ LIT &type $1 ] STH2r rom/get-head
		( addr* ) refs/<push-short>
		( value* ) refs/<push-short>
		( type ) refs/<push-byte> }
	( | mark as used )
	LDAkr STHr .SymType/used ORA STH2r STA
	LDA2 JMP2r

@refs/<push-short> ( -- )
	SWP /<push-byte>
	( >> )

@refs/<push-byte> ( byte -- )
	[ LIT2 &ptr =&mem ] INC2k ,&ptr STR2
	DUP2 ;&mem-end LTH2 ?{
		( ! ) ;dict/exceeded ;dict/References !<set-error-token> }
	STA
	JMP2r

@refs/<resolve-all> ( -- )
	,&ptr LDR2 ;&mem
	&>l ( -- )
		INC2k INC2 LDA2 ;<set-error-ref>/ref STA2
		.System/state DEI ?{
			/<resolve>
			#0005 ADD2 GTH2k ?&>l }
	POP2 POP2 JMP2r

@refs/<resolve> ( addr* -- addr* )
	DUP2k #0004 ADD2 LDA
	( | handlers )
	DUP .RefType/ab EQU ?/<set-ab>
	DUP .RefType/as EQU ?/<set-as>
	DUP .RefType/rb EQU ?/<set-rb>
	DUP .RefType/rs EQU ?/<set-rs>
	POP JMP2r

@refs/<set-ab> ( ref* type -- )
	POP /resolve-abs STA
	POP JMP2r

@refs/<set-as> ( ref* type -- )
	POP /resolve-abs STA2
	JMP2r

@refs/<set-rs> ( ref* type -- )
	POP /resolve-rel STA2
	JMP2r

@refs/<set-rb> ( ref* type -- )
	POP /resolve-rel
	( | validate distance )
	OVR2 #0080 ADD2 POP #00 EQU ?{
		( ! ) ;dict/too-far ;dict/Reference <set-error-ref> }
	STA
	POP JMP2r

@refs/resolve-sym ( ref* -- ref* addr* )
	( sym* ) INC2k INC2 LDA2
	( sym/addr* ) LDA2k INC2k ORA ?{
		( ! ) ;dict/invalid ;dict/Reference <set-error-ref> }
	( | sym* addr* )
	NIP2 JMP2r

@refs/resolve-abs ( ref* -- value* addr* )
	( value* ) /resolve-sym !/resolve

@refs/resolve-rel ( ref* -- value* addr* )
	( value* ) /resolve-sym OVR2 LDA2 /get-distance
	( >> )

@refs/resolve ( ref* -- value* addr* )
	( addr* ) SWP2 LDA2 ;rom/mem ADD2 JMP2r

@refs/get-ab ( label* -- addr )
	.RefType/ab /get-type NIP JMP2r

@refs/get-as ( label* -- addr* )
	.RefType/as !/get-type

@refs/get-rb ( label* -- distance )
	.RefType/rb /get-type INC2k ORA ?{
		( undefined ) POP2 #00 JMP2r }
	rom/get-head /get-distance
	( | check distance )
	DUP2 #0080 ADD2 POP ?{ NIP JMP2r }
	NIP
	( ! ) ;dict/too-far ;dict/Reference !<set-error-token>

@refs/get-rs ( label* -- distance* )
	.RefType/rs /get-type rom/get-head
	( >> )

@refs/get-distance ( addr* -- distance* )
	( ) INC2 INC2 SUB2 JMP2r

(
@|Rom )

@rom/get-head ( -- addr* )
	[ LIT2 &head 0100 ] JMP2r

@rom/<set-head-rel> ( addr* -- )
	rom/get-head ADD2
	( >> )

@rom/<set-head> ( addr* -- )
	,&head STR2
	JMP2r

@rom/<write-macro> ( t* macro* -- )
	token/<new>
	&>wcap ( name* -- body* )
		INC2 LDAk #20 GTH ?&>wcap
	INC2
	&>body ( body* -- cap* )
		LDAk token/<push-byte>
		INC2 LDAk ?&>body
	NIP2 LDA !token/<push-byte>

@rom/<write-str> ( str* -- )
	LDAk /<write-byte>
	INC2 LDAk ?&<write-str>
	POP2 JMP2r

@rom/<write-opcode> ( str* opc -- )
	#1f AND STH
	LDA2k [ LIT2 "LI ] EQU2 #70 SFT STH
	ORAr #0003 ADD2
	&>w ( -- )
		LDAk #21 LTH ?{
			LDAk [ LIT "k ] NEQ ?{ LITr 80 ORAr !&r }
			LDAk [ LIT "r ] NEQ ?{ LITr 40 ORAr !&r }
			LDAk [ LIT "2 ] NEQ ?{ LITr 20 ORAr !&r }
			( ! ) ;dict/invalid ;dict/Opcode <set-error-token> &r INC2 !&>w }
	POP2 STHr !/<write-byte>

@rom/<write-lithex> ( str* -- )
	INC2k INC LDZ NEQ #50 SFT #80 ORA /<write-byte>
	is-hex ?{ ;dict/invalid ;dict/Number <set-error-token> }
	( >> )

@rom/<write-rawhex> ( str* -- )
	INCk INC LDZk ?{ POP shex NIP !/<write-byte> }
	INC INC LDZ ?{ shex !/<write-short> }
	POP2 ;dict/invalid ;dict/Number !<set-error-token>

@rom/<write-call> ( str* opc -- )
	/<write-byte>
	refs/get-rs
	( >> )

@rom/<write-short> ( short* -- )
	SWP /<write-byte>
	( >> )

@rom/<write-byte> ( byte -- )
	DUP /get-head INC2k /<set-head>
	;&mem ADD2 STA
	( not zero ) ?{ JMP2r }
	/get-head
	( ) OVR ?{
		( ! ) ;dict/invalid ;dict/Writing <set-error-token> }
	;&length STA2
	JMP2r

(
@|Stdlib )

@is-hex ( str* -- str* f )
	DUP2
	&>w ( -- )
		chex INC ?{ POP2 #00 JMP2r }
		INC2 LDAk ?&>w
	POP2 #01 JMP2r

@shex ( str* -- value* )
	[ LIT2r 0000 ]
	&>w ( `i* -- )
		( acc ) [ LITr 40 ] SFT2r
		( res ) chex [ LITr 00 ] STH
		ADD2r INC2 LDAk ?&>w
	POP2 STH2r JMP2r

@hexs ( hex -- char char )
	DUP #04 SFT hexc SWP
	( >> )

@hexc ( hex -- char )
	#0f AND #0a LTHk ?{
		SUB [ LIT "a ] ADD JMP2r }
	POP [ LIT "0 ] ADD JMP2r

@chex ( str* c -- str* <val> )
	LDAk [ LIT "0 ] SUB DUP #0a LTH ?{
		#27 SUB DUP #10 LTH ?{ POP #ff } }
	JMP2r

@scap ( str* -- end* )
	INC2 & LDAk ?scap
	INC2 JMP2r

@wcmp ( a* b* -- f )
	STH2
	&>l ( a* `b* -- f )
		LDAk #21 LTH ?{
			LDAk LDAkr STHr NEQ ?{ INC2 INC2r !&>l } }
	LDA #21 LTH LDAr STHr #21 LTH AND JMP2r

@scmp3 ( a* b* -- f )
	LDA2k ROT2 LDA2k ROT2 EQU2 STH
	INC2 LDA2 SWP2 INC2 LDA2 EQU2 STHr AND JMP2r

@<pstr> ( str* -- )
	LDAk #19 DEO
	INC2 & LDAk ?<pstr>
	POP2 JMP2r

@<pdec> ( short* -- )
	[ LIT2r ff00 ]
	&>read ( -- )
		#000a DIV2k STH2k MUL2 SUB2 STH2r INCr ORAk ?&>read
	POP2
	&>write ( -- )
		NIP #30 ADD #19 DEO
		OVRr ADDr STHkr ?&>write
	POP2r JMP2r

(
@|Assets )

@runes/find ( char -- <addr>* )
	STH
	;&lut
	&>l ( -- )
		LDAk STHkr EQU ?{
			#0003 ADD2 LDAk ?&>l
		POP2 #ffff }
	POPr JMP2r

@opcodes/find ( str* -- str* <opc> )
	[ LITr 00 ] ;&lut
	&>l ( -- )
		SWP2k scmp3 ?{
			INCr #0003 ADD2 LDAk ?&>l
		POPr [ LITr ff ] }
	POP2 STHr JMP2r

@opcodes/lut [
	"LIT "INC "POP "NIP "SWP "ROT "DUP "OVR
	"EQU "NEQ "GTH "LTH "JMP "JCN "JSR "STH
	"LDZ "STZ "LDR "STR "LDA "STA "DEI "DEO
	"ADD "SUB "MUL "DIV "AND "ORA "EOR "SFT
	"BRK ] $1

@dict/assembled "Assembled 20 $1 &in 20 "in 20 $1 &bytes 20 "bytes( $1 &labels 20 "labels). 0a $1
	&unused "-- 20 "Unused: 20 $1
	&reset "RESET $1
	&Symbol "Symbol $1
	&Reference "Reference $1
	&Opcode "Opcode $1
	&Number "Number $1
	&Writing "Writing $1
	&Macros "Macros $1
	&Macro "Macro $1
	&Symbols "Symbols $1
	&References "References $1
	&exceeded "exceeded $1
	&invalid "invalid $1
	&duplicate "duplicate $1
	&too-far "too 20 "far $1

(
@|Buffers )

@lambda/mem $100

@refs/mem ( addr*, symbol*, RefType )
	$1800 &mem-end

@syms/mem ( addr*, SymType, body..00 )
	$4800 &mem-end

@macros/mem ( name..20, value..00 )
	$1000 &mem-end

@rom/mem ( zeropage )
	$100 &output

