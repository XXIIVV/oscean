<h2>Uxntal Notation</h2>

<p>The Uxntal notation follows that of the <a href='forth.html'>Forth</a>
programming language, where each item on the left of the <kbd>--</kbd> spacer
is the state of the stack before, and to the right, the state of the stack
after:</p>

<pre>
<b>@routine</b> <i>( a b -- a b c )</i>
	ADDk JMP2r
</pre>

<p>By default, single items are a byte long, and shorts are indicated with a
<kbd>*</kbd> suffix, the order in which they appear is the order of the stack
with the top item to the right:</p>

<pre>
<b>@routine</b> <i>( a b* -- b* a )</i>
	ROT JMP2r
</pre>

<p>The pipe indicator is sometimes used to indicate that stack effects are 
happening on the <a href='uxntal_stacks.html'>return stack</a>:</p>

<pre>
<b>@routine</b> <i>( a -- | a )</i>
	STH JMP2r
</pre>

<p>If a routine is a <a href='uxntal_devices.html'>vector</a>, it uses the arrow
notation.</p>

<pre>
<b>@on-event</b> <i>( -> )</i>
	BRK
</pre>

<h3 id='validation'>Validation</h3>

<p>Program validation is done by checking the stack effect notation of routines,
against the sum of stack changes predicted to occur based on the content of
their bodies. For more details, see <a href='https://git.sr.ht/~rabbits/uxnbal'
target='_blank'>Uxnbal</a>.</p>

<p>Words that do not pass the stack-checker are generating a warning, and so
essentially this defines a very basic and permissive type system that
nevertheless catches some invalid programs and enables compiler optimizations.
</p>

<pre>
<b>@add</b> ( <b style='color:red'>a*</b> b* -- c* ) <i>Warning: Imbalance in @add of +2</i>
	DUP2 ADD2
JMP2r
</pre>

<p>The simplest case is when a piece of code does not have any branches or
recursion, and merely pushes literals and calls words. The stack effect
routines is always known statically from the declaration.</p>

<pre>
<b>@routine</b> ( a b -- c ) 
	EQUk <b style='color:red'>?&sub-routine</b> <i>Warning: Imbalance in @routine of +1</i>
	POP2 #0a JMP2r
	&sub-routine ( a b -- c*</b> )
		POP2 #000b JMP2r
</pre>

<p>Lastly, a <b>runtime specific</b> solution to validate the stack state at any
one point during the execution of a program, is to read the <a
href='varvara.html#system'>System/wst</a> port and compare it against a given
stack pointer byte value.</p>

<pre>
<b>@on-reset</b> <i>( -> )</i>
	#abcd DUP2 
	.System/wst DEI #05 EQU ?{
		#01 .System/debug DEO }
	BRK
</pre>

<h3 id='comments'>Comments</h3>

<p>A comment is any character sequence within parentheses, the opening
parenthesis must be followed by a whitespace character and the closing
parenthesis must follow a whitespace character. Comments can be nested.</p>

<pre>
<i>( ( nested ) )</i>
<i>( 1+2*(4/3) )</i>
</pre>

<h3 id='brackets'>Brackets</h3>

<p>The square brackets do nothing, they are there merely for readability and <a
href='uxnfor.html'>formatting</a>, they are useful for making explicit certain
things like grouping behaviors, joining literals or indicating lookup tables.</p>

<pre>
<b>@routine</b> <i>( -- )</i>
	[ LIT2 20 -Console/write ] DEO JMP2r

<b>%min</b> <i>( a b -- r )</i> {
	GTHk [ JMP SWP ] POP }

<b>@sprite</b> [ 00 66 ff ff ff 7e 3c 18 ]
</pre>

