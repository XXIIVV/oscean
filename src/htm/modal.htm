<h2>Modal is a tree rewriting system.</h2>

<img src='../media/refs/soulages.png' style='float:right;width:200px' title='Pierre Soulages | Lithographie n°30 (1972)'/>

<p>Modal programs are represented as a series of substitution rules, applied to a given tree which gets
continually modified until no rules match any given part of the tree. The two principal elements of modal are:</p>

<ul>
	<li><a href='#rules'>Rules</a>: &lt;&gt; left right</li>
	<li><a href='#registers'>Registers</a>: ?x, ?y, ?z</li>
</ul>

<p>The documentation below displays the examples as a series of rules, followed
by the rewriting steps in the following format:</p>

<pre>
<> (Let's learn modal!) <i>This is a comment</i>
<> (hello) (good bye)   <i>This is a rule</i>
</pre>
<pre style='margin-top:-29px'>
(hello) world           <i>This is the input</i>
(good bye) world        <i>This is the result</i>
</pre>

<h3>Playground</h3>

<p>Modal's evaluation model is based on scanning from left-to-right across a string that represents a serialized tree. We only match from the start of the string, and if we can't find a rule that matches, we move one token or subtree forward. All rules match against the start of the string, and if one matches, the matched pattern is erased, and the right-hand side of the rule is written to the end of the string.</p>

<iframe src="../etc/modalrepl/index.html" frameborder="0" class='frame'></iframe>

<style>
.frame { overflow: hidden; height: 450px; margin-bottom: 15px; border-radius:5px }
</style>

<h3 id='rules'>Rules</h3>

<p>To define a new rule, start with <kbd>&lt;&gt;</kbd>, followed by a
<i>left</i> and a <i>right</i> statement, which is either a word, or a <a
href='#tree'>tree</a>. The program evaluation starts at the first character of
the string and walks through to the end trying to match a transformation rule
from that location:</p>

<pre>
<> (a bat) (a black cat)
<> (a person) (a bat)
</pre>
<pre style='margin-top:-29px'>
(I am (a person))
(I am (a bat))
(I am (a black cat))
</pre>

<p>Modal is homoiconic, meaning that any string is a potential program and new rules can be
composed directly during the evaluation. For instance, here is a rule that defines
a new rules definition <a href='notation.html'>infix syntax</a>:</p>

<pre>
<> (init) (
   <> (red) (green) 
   <> (green) (blue)
   (red) marble)</pre>
<pre style='margin-top:-29px'>
(init)
((red) marble)
((green) marble)
((blue) marble)
</pre>

<h3 id='registers'>Registers</h3>

<p>Registers are <kbd>?</kbd> prefixed identifiers bound to an address in a pattern
used in rewriting. When a register is used in a pattern, and when we try to match a given tree
with a pattern, each register is bound to a corresponding address to the
left-side of the rule, and referenced to the right-side of the rule:</p>

<pre>
<> (copy ?a) (?a ?a)
<> (swap ?x ?y) (?y ?x)</pre>
<pre style='margin-top:-29px'>
(copy cat) (swap bat rat)
(cat cat) (swap bat rat)
(cat cat) (rat bat)
</pre>

<p>When a register appears more than once in a rule, each instance is bound to
the first address, but differently named registers can still match on the same pattern:</p>

<pre>
<> (compare ?x ?x) (same)
<> (compare ?x ?y) (different)
</pre>
<pre style='margin-top:-29px'>
(compare cat bat) (compare rat rat)
(different) (compare rat rat)
(different) (same)
</pre>

<h3>Logic</h3>

<p>Equality in logic can be implemented by defining the truth table the comparison as shown above, for binary logic we can expand on the idea:</p>

<pre>
<> (and #t #t) #t <> (or #t #t) #t 
<> (and #t #f) #f <> (or #t #f) #t
<> (and #f #t) #f <> (or #f #t) #t 
<> (and #f #f) #f <> (or #f #f) #f
<> (not #t) #f    <> (not #f) #t
</pre>
<pre style='margin-top:-29px'>
(not (and #t #f))
(not #f)
#t
</pre>

<p>Building on the comparison rule above, we can write conditionals with a ternary statement: </p>
<pre>
<> (ife #t ?t ?f) ?t
<> (ife #f ?t ?f) ?f
<> (print ?:) ()

(ife #t (print True) (print False))
</pre>
<pre style='margin-top:-29px'>
(ife #t (print True) (print False))
(print True)
</pre>
<pre style='margin-top:-29px'>
<b>True</b><span style='float:right'>?:</span>
</pre>

<h3 id='types'>Types</h3>

<p>Understanding how to use <i>types</i> to orchestrate a specific evaluation order is
important to become proficient with Modal. Creating a type system is merely a
matter of creating stricter rules expecting a specific grammar. Notice in the example below, print rule expects a specific type of data before firing despite being above:</p>

<pre>
<> (print (Name ?:)) (done.)
<> (get-name) (Name Eva)
</pre>
<pre style='margin-top:-29px'>
(print (get-name))
(print (Name Eva))
(done.)
</pre>
<pre style='margin-top:-29px'>
<b>Eva</b><span style='float:right'>?:</span>
</pre>

<h3>IO</h3>

<p>Events are handled by special registers with IO capabilities, for example, the <kbd>?:</kbd> that emits a symbol to the console. Here is a little program that prints letters in a list.</p>

<pre>
<> (putrec (?: ?x)) (putrec ?x)
<> (putrec (?:)) (done.)
</pre>
<pre style='margin-top:-29px'>
(putrec (a (b (c (d (e))))))
(putrec (b (c (d (e)))))
(putrec (c (d (e))))
(putrec (d (e)))
(putrec (e))
(done.)
</pre>
<pre style='margin-top:-29px'>
<b>abcde</b><span style='float:right'>?:</span>
</pre>

<p>When giving a quoted symbol, like (0), to the <kbd>?:</kbd> register, the value printed will be the depth of nesting.</p>

<pre>
<> (add (?a) ?b) (add ?a (?b))
<> (add 0 ?b) (sum ?b)
<> (print (sum ?:)) ()
</pre>
<pre style='margin-top:-29px'>
3 + 2. (print (add (((0))) ((0))))
</pre>
<pre style='margin-top:-29px'>
<b>5</b><span style='float:right'>?:</span>
</pre>

<h3 id='lists'>Lists</h3>

<p>In Modal, lists are best stored as nested trees, this makes them easier to manipulate, here's how to reverse a list:</p>

<pre>
<> (reverse List (?x ?y) ?z) (reverse List ?y (?x ?z))
<> (reverse List ?empty ?list) (print List ?list)
<> (print List (?: ?x)) (print List ?x)
<> (print List ()) (done.)
</pre>
<pre style='margin-top:-29px'>
(reverse List (m (o (d (a (l ()))))) ())
(reverse List (o (d (a (l ())))) (m ()))
(reverse List (d (a (l ()))) (o (m ())))
(reverse List (a (l ())) (d (o (m ()))))
(reverse List (l ()) (a (d (o (m ())))))
(reverse List () (l (a (d (o (m ()))))))
(print List (l (a (d (o (m ()))))))
(print List (a (d (o (m ())))))
(print List (d (o (m ()))))
(print List (o (m ())))
(print List (m ()))
(print List ())
(done.)
</pre>
<pre style='margin-top:-29px'>
<b>ladom</b><span style='float:right'>?:</span>
</pre>

<p>That's it! I hope you enjoy exploring this strange programming language.</p>

<img src='../media/refs/soulages2.png' style='margin:30px auto; display:block' title='Pierre Soulages | Lithographie n°19 (1968)'/>

<q><b>modal</b>(adj.): of, or relating to structure as opposed to substance.</q>

<ul>
	<li><a href='https://git.sr.ht/~rabbits/modal' target='_blank'>view sources</a>, Uxntal.</li>
	<li><a href='https://discord.gg/tXsjckBreW' target='_blank'>discord channel</a>, in the Concatenative Server.</li>
	<li><a href='https://www.sheeeeeeeep.art/types-of-modal.html'>Levels of Dynamic behavior in Modal</a></li>
	<li>This language is an original creation of <a href='https://wryl.tech/' target='_blank'>wryl</a> from 2018, who has courteously spent countless hours to help me progress with the language, much of the code above is derived from their research and merely made available here as to give this fantastic system a home on the internet.</li>
</ul>
