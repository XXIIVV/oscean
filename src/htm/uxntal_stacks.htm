<h2>Uxntal Stacks</h2>

<p>All programming in Uxntal is done by manipulating the <i>working stack</i>,
and <i>return stack</i>, each stack contains 256 bytes. Here are some stack
primitives assuming the initial state of the stack is <code>a b c</code> where
<code>c</code> is the top of the stack: </p>

<table border='1'>
	<tr><th>POP</th><td>a b</td><td>Discard top item.</td></tr>
	<tr><th>NIP</th><td>a c</td><td>Discard second item.</td></tr>
	<tr><th>SWP</th><td>a c b</td><td>Move second item to top.</td></tr>
	<tr><th>ROT</th><td>b c a</td><td>Move third item to top.</td></tr>
	<tr><th>DUP</th><td>a b c c</td><td>Copy top item.</td></tr>
	<tr><th>OVR</th><td>a b c b</td><td>Copy second item to top.</td></tr>
</table>

<p>A byte is a number between 0-255(256 values), a short is a number between
0-65535(65536 values) made of two bytes, each byte in a short can be
manipulated individually:</p>

<pre>
#0a #0b POP <span style='float:right'>0a</span>
#12 #3456 NIP <span style='float:right'>12 56</span>
#1234 DUP <span style='float:right'>12 34 34</span>
</pre>

<p>The two stacks are <i>circular</i>, to pop an empty stack does not trigger an
error, but merely means to set the stack pointer to 255. There are no invalid
programs, any sequence of bytes is a potential Uxn program. Values are moved
between stacks with the <a href='uxntal_reference.html#sth'><kbd>STH</kbd></a>
opcode.</p>

<pre>
WST 00 00 00 00 00 00|12 34 <02
RST 00 00 00 00 00 00 00|56 <01
</pre>

<p>The program above contains 12 and 34 on the working stack, and 56 on the
return stack. The stack content can always be printed by sending a non-null
byte to the <a href='varvara.html#system'>System/debug</a> port.</p>


