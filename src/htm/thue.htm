<h2>Thue is a string-rewriting system.</h2>

<img src='../media/refs/gruuue.png' style='float:right;width:150px'/>

<p>A Thue program consists of two parts: a list of <a
href='rewriting.html'>substitution rules</a>, made of left and right sides separated by the <i>Ungoliant operator</i>(<code>::=</code>), terminated by an empty rule
with both sides empty, followed by a string representing the
initial program state:</p>

<pre>
left::=right   <i>a rule</i>
::=            <i>an empty rule</i>
[left]         <i>the initial state</i>
</pre>
<pre style="margin-top:-29px">
[right]        <i>the result</i>
</pre>

<article>
	<p>The documentation below will not display the empty rule, and split the evalation steps from the program.</p>
</article>

<p>Execution consists of picking, from the list of rules, an arbitrary rule whose original string exists as a substring somewhere in the program state, and replacing that substring by the rule's replacement string. This process repeats until there are no rules that can be applied, at which point, the program ends. </p>

<iframe src="../etc/thuerepl/index.html" frameborder="0" class='frame'></iframe>

<style>
.frame { overflow: hidden; height: 450px; margin-bottom: 15px; border-radius:5px }
</style>

<h3>Logic</h3>

<p>Logic in Thue is defined by creating rules for the different states of the permutation of cases.</p>

<pre>
(or T T)::=T
(or T F)::=T
(or F T)::=T
(or F F)::=F
</pre>
<pre style="margin-top:-29px">
(or (or T T) F)
(or T F)
T
</pre>

<h3>Numbers</h3>

<ul style='float:right'>
	<li><code>|</code>, for 1 </li>
	<li><code>||</code>, for 2 </li>
	<li><code>|||</code>, for 3 </li>
	<li><code>||||</code>, for 4 </li>
</ul>

<p>There are no number systems built into Thue, but we can represent numbers as tally marks. For example, to get the <b>sum</b> of two numbers using tally marks, we can remove the operator to concatenate the two numbers(3 + 5):</p>

<pre>
 + ::=
</pre>
<pre style="margin-top:-29px">
||| + |||||
||||||||
</pre>

<p>To get the <b>difference</b> of two numbers using tally marks, removing a mark from each side of the operator gives the result(5 - 3):</p>

<pre>
| - |::= - 
</pre>
<pre style="margin-top:-29px">
||||| - |||
|||| - ||
||| - |
|| - 
</pre>

<img src='../media/refs/bthennota.png' width='100'/>

<h3>Iterators</h3>

<p>To make a counter that waits for 8 ticks:</p>

<pre>
.::=*
*wait::=*done
</pre>
<pre style="margin-top:-29px">
.....wait
*....wait
**...wait
***..wait
****.wait
*****wait
*****done
</pre>

<h3>Loops</h3>

<p>Nested loops can be done like:</p>
<pre>
spring::=summer
summer::=autumn
autumn::=winter
winter year1::=spring year2
winter year2::=reached
::=
spring year1
</pre>
<pre style="margin-top:-29px">
spring year1
summer year1
autumn year1
winter year1
spring year2
summer year2
autumn year2
winter year2
reached
</pre>

<h3>Physics</h3>

<p>Operating a rewriting system such as this one is sometimes akin to creating a physics engine where you move a cursor across the world, colliding along the way with places in memory to operate on.</p>

<pre>
>.::=.>
>|::=*|
*|::=.|
</pre>
<pre style="margin-top:-29px">
>....|
.>...|
..>..|
...>.|
....>|
....*|
.....|
</pre>

<h3>Random</h3>

<p>Rules are chosen randomly, making it possible, for example, to make a dice rolling program that might result in any of the possible values of a 6 sided die:</p>

<pre>
[roll]::=1
[roll]::=2
[roll]::=3
[roll]::=4
[roll]::=5
[roll]::=6
</pre>
<pre style="margin-top:-29px">
You rolled [roll].
You rolled 3.
</pre>

<!--
<h3>I/O</h3>

<p>Added to this system are two strings which are used to permit Thue to communicate with the outside world. The first of these is the <b>input</b> symbol(:::) which is actually the left-side of an implicit rule of which the user input is a component. The input symbol, therefore, is replaced by a line of text received from the "input stream."</p>

<p>As a counterpart of input, the <b>output</b> symbol(~) is supplied. Like the input symbol, the output symbol triggers an implicit rule which, in this case, encompasses the "output stream."  The specific effect is that all text to the right of the output symbol in the rhs of a production is sent to the output stream.</p>

<p>Note that either (or both) of these implicit rules may be overridden by providing explicit rules that perform some other task.</p>

<pre>
#::=<span style='color:#777'>Sierpinski's triangle, backticks are linebreaks</span>
X::=~_
Y::=~*
Z::=~`
_.::=._X
_*::=*_Y
._|::=.Z-|
*_|::=Z
..-::=.-.
**-::=*-.
*.-::=*-*
.*-::=.-*
@.-::=@_.
@*-::=@_*
::=
@_*...............................|
</pre>
-->

<img src='../media/refs/spider.jpg'/>

<q>It is pitch black. You are likely to be eaten by a Thue.</q>

<img src='../media/refs/grue.png' style='width:300px' title='Bivotar & Juranda, Zork'/>

<ul>
	<li><a href='https://esolangs.org/wiki/Thue' target='_blank'>On Esolangs</a></li>
	<li><a href='../etc/thue.tal.txt' target='_blank'>Interpreter</a>, written in Uxntal. <a href='https://www.youtube.com/watch?v=A8f7IsQ8ENQ' target='_blank'>Video</a></li>
	<li><a href='https://git.catseye.tc/Wanda/' target='_blank'>Wanda</a>, concatenative language meets string rewriting.</li>
</ul>

<!--

For want of a nail,
	the shoe was lost.
For want of a shoe,
	the horse was lost.
For want of a horse,
	the knight was lost.
For want of a knight,
	the battle was lost.
So it was a kingdom was lost,
	all for the want of a nail.

	George Herbert, Jacula Prudentum

-->
