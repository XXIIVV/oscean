<h2>10 PRINT "Hello World"</h2>

<p>This guide is written specifically for the <a href='https://git.sr.ht/~rabbits/tiny-basic' target='_blank'>Sunflower BASIC implementation</a>, but it should still give a general idea of how to use the language's primitives which are also found in most BASIC implementations.</p>

<figure>
	<img src='../media/refs/vogue-basic.jpg' width='300'/>
	<figcaption>Typical BASIC Programmer</figcaption>
</figure>

<h3>Introduction</h3>

<p>A BASIC program begins with line numbers, control-flow is done by jumping to absolute line numbers which point to compiled BASIC code data. 0 is not a valid line number.</p>

<pre>
<span class='line'>1</span> <span class='cmd'>REM</span> <i>This is a comment.</I>
<span class='line'>2</span> <span class='cmd'>LET</span> I=I+1, F=I%3=0, B=I%5=0
<span class='line'>3</span> <span class='cmd'>IF</span> F PRINT "FIZZ";
<span class='line'>4</span> <span class='cmd'>IF</span> B PRINT "BUZZ";
<span class='line'>5</span> <span class='cmd'>IF</span> F+B=0 PRINT I;
<span class='line'>6</span> <span class='cmd'>PRINT</span> ""
<span class='line'>7</span> <span class='cmd'>IF</span> I<100 GOTO 2
<span class='line'>8</span> <span class='cmd'>END</span>
</pre>

<p><b>Expressions</b> can include numbers, variables and arithmetic operators. Numbers are decimal, but can be prefixed with <kbd>$</kbd> for <a href='hexadecimal.html'>hexadecimal</a>, there are no <a href='notation.html'>precedence rules</a>.</p>

<pre>
10 LET A=6+7
20 PRINT 52+$20*A
30 END
</pre>

<p>Valid expressions arithmetic operators are <kbd>+-*/%</kbd>, bitwise operators are <kbd>&|</kbd>, logic operators are <kbd>&lt;&gt;=!</kbd>. The smallest number is -32768, the largest number is 32767.</p>

<h3>Interpreter</h3>

<p>The interpreter below allows you to play with the examples on this page.</p>

<iframe height='384' width='624' src="../etc/uxn5/index.html#r=bKABYIAGN6Dg8YAIN6Dg3oAKN6DwSoAMN6ACcIAiN6ABgIAkN4AiNoBXYAeigCQ2gEhgB5pgC_NgC5lgCVVgCdGgBz6AEDegAaGAgDeAdBAgAARgCeEAYAGeoAB0YASsAABUaW55QkFTSUMKQSCBB38gaW50ZXJwcmV0ZXIKQnkgRGV2aW5lIEx1IExpbnZlZ2EKMjggQXVnIDIwMjUAAICCNiagAXYpIAAFImALugBgBk0CAGAAi69gAHugDqqgDoC0NO9gDI4gAA0hIaog__EiImKgAABsYiM0oAAEOGyAKDagDqigDoDgAADPgAMcIFIAA2AKWu-gAAM8gGA_oAAgOIAoN7Q0YAmiISFBqiD_2yIiYoAoN2AKFmAKE6APBGAJiWAKCkAKLaAAAjk0YAl7YAn8QAoflIAgCiAAAWwhQP_0lIAIBpSALAggAAeCFyoFIZQg_-hsYAA5JGD_4JQPJE9gAhudIAACImyAETOACDMhYAAegAQzoAAAggIELiRg_7iBJxgB850g_9oibGD_qJSAJAggADqUYAtwIAARggYgEKAAACegD3ZACKuhJBRABibgAADgAAp6wACUgDAZD3ghgAYUgAoLIP_pb2wh4AAAwEB_wACUYAs7gBtRYAs0ASD_7G9soBlMoEAAYAtrYAS1QAW_gCA_oBlMOGxg_4hg__ImoFlMKyAACyIioA9toA9DQAg_L2D_GZQgAA4ioAAA72FhNaAAAG81bGD-doAMTGD-_ZQgAAeg__5vNSJsoAeeNG81QAQmoAAEOGygWUwk4AAAtB0gAAZg_-xAABhh3U8gAAwiImKgDzqgD1JAB-KhITQnNC6qIP_ZIiJigDEWoBlMtKAAACggAAwmJqAZTDmAAj9gCeaAUAaqIP_kIiJshBUFQAeAoAAAgHIMOWAIJKAO92AH2kAIgYJDDaAZTKoMJCKAFTOgWUyrgAkICDOgA_eAIDdsgDQBAACDZAQNJmD_roCtBIDrMyIAg2Ui4yIiYAg4oAAAgCA3ADhsOWw6bDxsPWyggACvOCRvOCqAAASFDAArgAwAKIARACmAFn-7OjlsnYAACCAAEWAAF686JGAAEa86eiQ7bzpsITsnoA9XQAbtJoAPP6D__zqgAAE9bA-gDqqUzwggAAchISGUIP_zITRCbA-OD5IiYAQioBlMQP63D8MPyGD9lJQgAAciYP8eQAecYP2fL2D9gpQgAAsib2D-O2D-6UAHhmD9iVxg_i8hI29g_ilg_vxAB3QQLBAyImAIP0D-CRBQEFQiQP5lEHwQgGD9R5QgAAQiQP5WlIAZEyFg_TeUgD0IIAAJoA99YAZMQP4-IWD9PIAAYAOoQP_RELEQtGD9LR2CMjkjQAkNEOIQ52D9GyZg_cA0HSAADCIjoPAAJKAPQ0AGDyMjQP2qEQ8REyIioP_wbBEvETVg_PAmYP2ViypsBeQjJKAABDhgAjhA_XgRYxFqIiJAAkgRmBGeoAENE2D8omAAEpQg__YioAAACCAAA2AGnUD9pJSAOwkgAAYhoADpE2yUgCIJIAAEIUAFzJSAIwkgAAghYPyDA0AF3pRgCB8gAAZg_HVABe6UgIBAEQagEZhABW5sEfcR_WAC_GADVoCgVxItEjJg_DZgAVugAHRgB9UgAAmgAHSgD01ABUNg_NFgAY9gAmmgAHSAqDegAAGAqjfgBlHArICj95YgAAxCYgJg_XhgBOlA_QuAAGABrED_5xJUEllg--WFLwlg_SdA_O0SfBKCgoYzEmD74YAIN2D724AKN2D71YAMNyJA_MwStBK4IqAAIKAMMjVgA_RgBbZA_LcSzBLRYPuynYG_CQ0moAP_PIAoNyaAIwMiYPuaghcACIIXfyo3IiJA_IQS9RL6YPt_IwOgC9UVQPx0ExUTGmD7VmADBED8Zw8vAWFg-0mUIAAEIkD63mD6sJ0gAAcjoA-GQARVI0D7FRNDE0hg-0GgAP88gDA_oBQIOC9g-xmUIAAFImJA_Cdg-ybvYWE1QP_qoAoSFokgAAgioAB0YP6-AGAASQICAIB0BoCzCSAACiKgD22gD0hABACBgOoTEWygdOQTlAYgAAVg_9sibGD_1iFA_--UIAACImyUBoAfCiAABwIigABAAAdgAAQhgF4GWUwmoO_4KYVLG0NAA7ShgOgzFWygWUyA4DInOUAGqKAY-iagGTqFJR0RL0ADjqEhgOczNWyA4jImoBj6KSAADSKg8ACgD2OBHn9voAACOSaAxTM0bAaACAggACYGgAoIIAB_BoANCCAAeIAgiwMgAA-AfooDIAAIBmAAeAZgAJMCbAKgAG8SCSAAAWxgAHegACYXYAQpgCi2oAAgqgwkIgU3oAAvF6ABJhdAA_6AxRAgABagAACUgCALIAAKlGAFsSD6nkAF1SJsoCgAAGD5yWD532AAyiAABCJAAOuUIP_sImwCYAO_YP_EoAAAgAAGgAQTMYAqCwaAPwkgAAIibIGA8oERPewSgAEZBoDlExFsYAL6QAOSoABAoAA0QAWdgEEZBoAaCyAACAIioA99QAKGBhiAQBgxbAaAUgkgAAQCQAQZgCOAFCIwbGD5RZRgBRSAAAggAASUYAARIZQg_-oibIC0BoAFE4AbE4EJE8QJIAAKAqAPbaAPQ0ACNYGA6hMRgSIC4hILgFI0gABsgYDvExBsYP_pYP99gMsSgOESGWygAAQ4gMUxoAmmgJA3oAmYgBA3oAnRgIA3bKABJheA4RCQN6ABoYCAN6AHPoAQN4DFMID2NcUxYP9_QPnIoAASFmD_rCAAA2D_zgBgAuyAlhYgAAEAgJI2YP-VIAAHYALNYP-0AICUNmD_hYEPCb1g_6QAAICCFgaA_xSAgxZg_iIAgAAEgMUQIAACIgBg_12BTjZ_ACZgA_MgAAagD01AAWQmgKg3JmAAa4CqN6AL1RSALz0vYAA6gBQTgBoTgCg2gA4zoBk8gCw3g7aAuQEoN4AIDhk8gKw31wGKIP_0ImAB54AINeIiYmxgA-mgAAo5tGAADA-gAAM4NGAAA08EbGADuQRgA7WAQB8dbGADxqAABDk0oGNoKCAAB4FVCAhsoIAAoAAQbIVgCYAqN6CCLhegABiGDwCQgA-CgAAYgB8JoC4XgCI2oAAYOYYzAICEIwGAJIIZgxOBvwAghTsJQAE0oEYmF6AYCoDcAgUvl4AABxdsYP9-YP_mgOw2YAEzYAE2oA7OYACGYAEnoA7fYAB9YPiPQAEbYAEYoA8oYABuQAEPJzQdIAADIiJsYACjYAEutIHZMmAAU2ABIiEhNGAASkAAy6APNGAAQYA8YABLYAA5gD5gAEOAOmAAPmAA_mAAKWAAqqATgIKFIheAKLagAAg5BTdslIAiCCAACZRgABYhlCD_8CFslAYgAAMCgGkZBCFA__EGgAoJIAAEAkAAaoAABIAwP6AUCDiAzBsJLxdsB4CAHIAACCAADoAtYP_UoH__PKCAACQ5gNklgACAIhOgJxBgABmgA-hgABOgAGRgAA2gAApgAAcDgDAYQP-ju4aBPRgMBoAwGGD_lID_gO8TAjo5bKAAIIAoN4AqgKUcOK8FN2-AJDagABg5KyAAA0D-QmxgABdg_9qgE3iAzwABiM-DEwACiOOC7QA4gB0sEiYXgECgE3hAACJg__GgFiYXgMGgE8iAlhYgAAQioBOIgJI2gAozgJQ2gA4zgOUHAACgAAQ5gCiFCR0qN4AvlxdsoADGFqAAxRaAYD8-oADEFoDAPz6AIjOBCgsEP6AAwxYmOD6gAMKBIBWAwDaAoD8-gA8zbKAAACaAUD8-JoADgDgkACaA7TMmgAE_Pj6A8bMCbKANY4CoN6AAAoCqN6ANUYCsN6ANV4EFCl2ArDeAojYdIAABgEQBgAiAmwGACoEFDAw3bC50aGVtZQCgDYuBPwABgT8AhIAzAaMWgDIXgABg-nlA_-suc25hcmYAYAAtgCBgAEi0gN0DNGAAEIANRDohITRgAAWACkAAL5QGIAADAiJsYAAkIUD_8eD_AKAACruvOjlvQZ0g__MiA4AwGGAACEdYzyD_82JsgBsToA4AgK43bIZ-AQ4Agn4JbIAABmAAEiAAC4IGFASAJAlsAoAAbIBBGYAaC2yAMBmACoEGOQaACQoMbIAnGQaAChmABQoMbAKA_2yUIAACIWwhQP_2YPNrnSAAByOgD4ZA_RAsL5TUTwkgAAZhIZSAhBIUgAAIbIALM4AMM6AOeIACN2wAgwB_BJsEqQTjBO4E9gUpBTsFXAVmBY4FlwX5BlgGBwZuBo8GpAbXBxUG5wb0KwQmLQQoKgQqLwRYJgQsfAQuPAQwPgQ9PQRKIQRPJQRUAAAAU1VORkxPV0VSIEJBU0lDIABUWVBFICJIRUxQIiBGT1IgSU5GTyB_IAAgQllURVMgRlICRUUKhyQFIFBSSU5UgiqBCg8gREVUQUlMUwBSRUFEWS4AgEk0AEVSUk9SAElORklOSVRFAExJTkUAUEFUSABGSUxFAExPT1AARElWLUJZLVpFUk8AVU5ERVKAlgIAT1aDCFJOVU1CRVIAVkFSSUFCTEUAQ09NTUFORABSVU4Af1JVTiBCZWdpbiBldmFsdWF0aW9uIGZyb20gc21hbGxlc3QgbGluZSBudW1iZXIuAExJU1QAf4AFACCEABVQcmludCBlbnRpcmUgcHJvZ3JhbS4KgiMBMTKII4FJATEygxsFMjAsIDMwiBsScyAyMCB0byAzMC4AQ0xFQVIAf4EGBiAgRXJhc2WMYy4AUkVNAH9SRU0gVGhpcyBpcyBhIGNvbW1lbnQuLiAgTGVhdmUgcmVtYXJrLgBMRYC3HUVUIFg9MTIsIFk9QSsxICBBc3NpZ24gZXhwcmVzc4D7Q3RvIHZhcmlhYmxlLgBJRgB_SUYgQT5CIFBSSU5UIEMgIEV2YWx1YXRlIG9ubHkgd2hlbiBub3QgemVyby4AR09UTwB_gAUAIIFfCUNvbnRpbnVlIGWCNYBhAGGC7BEuAEVORAB_RU5EICBUZXJtaW6AVIYngEwCU1VCgE0CU1VCgk6FexhzdWJyb3V0aW5lIHVudGlsIFJFVFVSTi4AggcBAH-CD5KAA2Zyb22HQQEuAIHbAQB_guIJIkEgc3RyaW5nIoLCEERpc3BsYXkgdGV4dCB3aXRogb0GYnJlYWsuCo0zATsggACIMwguAElOUFVUAH-BBgogWCwgWSAgUGF1c4mTgsURdXNlciBpbnB1dC4ATE9BRAB_gAWDERtiYXMgIExvYWQgYmFzaWMgZmlsZS4AU0FWRQB_gAUDIG91dIUnA1NhdmWJJwZDT0xPUgB_gQZJICQ1MGYyLCAkYjBmOSwgJGEwZjggIFNldCBpbnRlcmZhY2UgY29sb3JzLgBDTFMAf0NMUiAgQ2xlYXIgc2NyZWVuLgBEUkFXAH-ABQUgMzIsIDSDQAtkcmF3aW5nIHBvc2mA2AcuAE1PREUAf4AFASAyiiMLbW9kZS4AUElDVAB_gAUbIGltYWdlMjB4MjAuaWNuICBQYWludCAxLWJpdIIbBy4AUE9LRQB_gAUVICQxMCwgJDEyMzQsICQ0NTY3LCAuLoOFDmF0YSBmcm9tICQ4MC4A_4MAAapVggEHAAAAAAgUFBeABwMACAgIgQcCAADAgwcdABAQIBAQCAcADw8fDw8HAAAgEBAQICDAAMDg4ODAhSUACII_AQAAsz_A_gcAYIAABQBgAGZmZoL_HWz-bGz-bAAYPmA8BnwYAABmbBgwZkYAOGw4cN7MdoAvgf8BHDCAAAMcADgMgAAGOAAAZjz_PIBCBBgYfhgYg_8BMDCALAB-hf8cGBgAAwYMGDBgwAA8Zm52ZmY8ABg4GBgYGH4APGaAGBV-AH4MGAwGZjwADBw8bH4MDAB-YHwGgA8DPGBgfIAvAH6APwUwMAA8ZmaAAoAHAT4GgH-AdIMDAxgYMACAZQIwGAyCfgV-AAAwGAyAeYJnAQAYgH8Pam5gPgAYPGZmfmZmAHxmZoACFwA8ZmBgYGY8AHhsZmZmbHgAfmBgfGBgfoMHCmAAPmBgbmZmPgBmgTYCZgA8gL4FGDwAPgYGgacIZmx4cHhsZgBggQAOfgDG7v7WxsbGAGZ2fn5ugC8AZoAAADyBb4BPgA8Cdmw2gX8AbIEfAWA8gP8AfoFXABiAZwBmg28MZmY8GADGxsbW_u7GAIAMAjxmZoCHgIIBAH6A3QRgfgA8MIAAAjwAwID9BAYDADwMgAAGPAAQOGzGAIUABf4AAGAwGIIPCTwGPmY-AGBgfGaA_woAADxgYGA8AAYGPoF3CgAAPGZ-YDwAHDB8gFkIAAAAPmZmPgZ8gi8EZgAYADiB_wEYAIGwBHBgYGZsgP-AFYAXBQAA7P7WxoB6gi-AT4D_gg8BfGCBTwJmPgaAHwJgYGCAXw1gPAZ8AAAYfhgYGA4AAIH5gIeC_wYAAMbG1nxsgBcCPBg8gE-BPg98AAB-DBgwfgAcMDBgMDAcgo0ZGBgYOAwMBgwMOAAAAGDyngwAABA4fP58OBCC-gQAAAADA4MKCOAAABgYPH5-foMaAAeCIgTAwAEBAYEtCPj8_v__fz8f_4EADMMAHz9____-_PiAgICDMSQPPz8PBwD-_vz8_Pz-_gAAQgAAQjwAf38_Pz8_f38A4PD8_PDggnkCAQEBhD8BAMOCUYRfgZoCgICAhJmDMQgAfn5-PBgYGRuCmAPgwMDAhcSDsYLKBx6c2Hg4EAgQ" style='border:0' allowfullscreen></iframe>

<h3>Variables</h3>

<img src='../media/generic/sunflower.png' style="float:right;width:160px;margin-left: 30px;"/>

<p><b>Variables</b> are single uppercase letters of the alphabet. Some variables have special properties, here is the complete list:</p>

<ul>
	<li><kbd>R</kbd>, reads a random number.</li>
	<li><kbd>W</kbd>, reads the screen width.</li>
	<li><kbd>H</kbd>, reads the screen height.</li>
</ul>

<p>For example, if you wanted to do a program to roll a 6-sided dice using the <kbd>R</kbd> variable.</p>

<pre>
10 PRINT "You rolled " R%6+1 "."
30 END
</pre>
<pre style='margin-top:-29px'>
You rolled 5.
</pre>

<h3>Loops</h3>

<p><b>Loops</b> are created by jumping back to the start of the loop with a GOTO, until a specific condition is met with IF. Using a variable as counter, a program can loop over a number of lines five times:</p>

<pre>
10 LET I=0
20    PRINT "Count: " I
25    LET I=I+1
30    IF I&lt;5 GOTO 20
40 END
</pre>
<pre style='margin-top:-29px'>
Count: 0
Count: 1
Count: 2
Count: 3
Count: 4
</pre>

<p>Loops can also be nested using two counters:</p>

<pre>
10 LET A=0
20    LET B=0
21        PRINT A ", " B
22        LET B=B+1
23        IF B<3 GOTO 21
30    LET A=A+1
31    IF A<3 GOTO 20
32 END
</pre>

<h3>Functions</h3>
<p><b>Functions</b> are created with GOSUB, similarly to GOTO, this operation moves evaluation to a different line, except that they keep a return address in memory to be jumped back to upon RETURN.</p>

<pre>
1 LET N=5
2 GOSUB 50
3 END

49 <i>REM Fib(N)</i>
50 LET A=3, B=1
51     LET C=A, A=3*A-B, B=C, I=I+1
52     IF I&lt;N GOTO 51
53 PRINT "Result: " C
54 RETURN
</pre>
<pre style='margin-top:-29px'>
Result: 144
</pre>

<h3>Interaction</h3>

<p>The <kbd>INPUT</kbd> statement, will halt the execution and wait for an input. This can be used to store a value into a variable. For example, to capture the position of the mouse cursor: </p>

<pre>
10 PRINT "Touch the screen"
20 INPUT X, Y
30 PRINT "You touched at: " X ", " Y
50 PRINT "Press a button"
60 INPUT B
70 PRINT "You pressed: " B
80 END
</pre>

<img src="../media/refs/basic.png" width='200'>

<h3 id='manual'>Manual</h3>

<table border='1'>
	<tr>
		<th rowspan='6'>Hypervisor</th>
		<th rowspan='2'><code>RUN</code></th><td>Used to begin program execution at the lowest line number.</td></tr>
	<tr><td><pre>RUN</pre></td></tr>
	<tr><th rowspan='2'><code>LIST</code></th><td>Causes part or all of the user program to be listed. If no parameters are given, the whole program is listed. A single expression parameter in evaluated to a line number which, if it exists, is listed. A two expressions will print a range of lines.</td></tr>
	<tr><td><pre>LIST 200
LIST 10,30
LIST</pre></td></tr>
	<tr><th rowspan='2'><code>CLEAR</code></th><td>Formats the user program space, deleting any previous programs. If included in a program the program becomes suicidal when the statement is executed.</td></tr>
	<tr><td><pre>CLEAR</pre></td></tr>
	
	<tr>
		<th rowspan='10'>Core</th>
		<th rowspan='2'><code>REM</code></th><td>Permits to add remarks to a program source.</td></tr>
	<tr><td><pre>REM This is a comment.</pre></td></tr>
	<tr><th rowspan='2'><code>LET</code></th><td>Assigns the value of an expression to a variable.</td></tr>
	<tr><td><pre>LET A=123/2, B=$20%2</pre></td></tr>
	<tr><th rowspan='2'><code>IF</code></th><td>If the result of the expression is not zero, the statement is executed; if False, the associated statement is skipped.</td></tr>
	<tr><td><pre>IF A>B-2 PRINT "A is greater."</pre></td></tr>
	<tr><th rowspan='2'><code>GOTO</code></th><td>Changes the sequence of program execution.</td></tr>
	<tr><td><pre>GOTO 50+A>B</pre></td></tr>
	<tr><th rowspan='2'><code>END</code></th><td>Must be the last executable statement in a program.  Failure to include an END statement will result in an error stop after the last line of the program is executed.</td></tr>
	<tr><td><pre>END</pre></td></tr>
	
	<tr>
		<th rowspan='4'>Subroutines</th>
		<th rowspan='2'><code>GOSUB</code></th><td>Changes the sequence of program execution, and remembers the line number of the GOSUB statement, so that the next occurrence of a RETURN statement will result in execution proceeding from the statement following the GOSUB.</td></tr>
	<tr><td><pre>GOSUB 220</pre></td></tr>
	<tr><th rowspan='2'><code>RETURN</code></th><td>Transfers execution control to the line following the most recent unRETURNed GOSUB.  If there is no matching GOSUB an error stop occurs. </td></tr>
	<tr><td><pre>RETURN</pre></td></tr>
	
	<tr>
		<th rowspan='4'>I/O</th>
		<th rowspan='2'><code>PRINT</code></th><td>Prints the values of the expressions and/or the contents of the strings in the console. To print the result of an expression as an <a href='ascii.html'>ascii</a> character, use <kbd>#$41</kbd>, to print the character A, end with a semi-colon to print without a linebreak.</td></tr>
	<tr><td><pre>PRINT "The result is: " A+B</pre></td></tr>
	<tr><th rowspan='2'><code>INPUT</code></th><td>Halts evaluation, and assigns the result of expressions to each of the variables listed in the argument. Expressions are entered sequencially and separated by a line break, a list of two arguments, will expect two input lines.</td></tr>
	<tr><td><pre>INPUT X, Y</pre></td></tr>
	
	<tr>
		<th rowspan='4'>File</th>
		<th rowspan='2'><code>SAVE</code></th><td>Exports your program to example.bas.</td></tr>
	<tr><td><pre>SAVE example.bas</pre></td></tr>
	<tr><th rowspan='2'><code>LOAD</code></th><td>Imports the example.bas program, replaces your current program.</td></tr>
	<tr><td><pre>LOAD example.bas</pre></td></tr>
	
	<tr>
		<th rowspan='12'>Screen</th>
		<th rowspan='2'><code>COLOR</code></th><td>Sets the interface RGB colors, see <a href='theme.html'>theme</a>.</td></tr>
	<tr><td><pre>COLOR $50f2, $b0f9, $a0f8</pre></td></tr>
	<tr><th rowspan='2'><code>CLS</code></th><td>Clears the screen.</td></tr>
	<tr><td><pre>CLS</pre></td></tr>
	<tr><th rowspan='2'><code>DRAW</code></th><td>Sets position of drawing.</td></tr>
	<tr><td><pre>DRAW 100, 320</pre></td></tr>
	<tr><th rowspan='2'><code>MODE</code></th><td>Sets drawing mode, see <a href='varvara.html#screen'>varvara</a>.</td></tr>
	<tr><td><pre>MODE 04</pre></td></tr>
	<tr><th rowspan='2'><code>POKE</code></th><td>Stores data into the font memory bank, the first value is an <a href='ascii.html'>ascii</a> byte value.</td></tr>
	<tr><td><pre>POKE 1, $1c1c, $087f, $0814, $2241</pre></td></tr>
	<tr><th rowspan='2'><code>PICT</code></th><td>Draws a <a href='icn_format.html#filename'>picture</a> from a file, uses MODE.</td></tr>
	<tr><td><pre>PICT image10x10.icn
PICT image12x18.chr</pre></td></tr>
	
</table>

<h3>Tic-Tac-Toe</h3>

<p>Here's a complete example that uses everything above and implements a graphical tic-tac-toe game.</p>

<pre>
1 <i>REM Create Assets: play[012] grid[567]</i>
2 POKE 1, $c3e7, $7e3c, $3c7e, $e7c3
3 POKE 2, $187e, $7eff, $ff7e, $7e18
4 POKE 5, $1818, $1818, $1818, $1818
5 POKE 6, $0000, $00ff, $ff00, $0000
6 POKE 7, $1818, $3cff, $ff3c, $1818

7 <i>REM Game Loop</i>
8 GOSUB 140
9 GOSUB 120
10 IF W=0 GOTO 8
11 PRINT "WINNER: " #W
12 END

120 <i>REM Request Player Turn</i>
121 PRINT "Player " #P+1 " input position[0-8]:"
122 INPUT X
123 IF X>8 RETURN

124 LET Y=P+1, P=P=0
130 IF X=0 LET A=Y
131 IF X=1 LET B=Y
132 IF X=2 LET C=Y
133 IF X=3 LET D=Y
134 IF X=4 LET E=Y
135 IF X=5 LET F=Y
136 IF X=6 LET G=Y
137 IF X=7 LET H=Y
138 IF X=8 LET I=Y

140 <i>REM Draw Grid</i>
141 CLS
142 PRINT #A #5 #B #5 #C
143 PRINT #6 #7 #6 #7 #6
144 PRINT #D #5 #E #5 #F
145 PRINT #6 #7 #6 #7 #6
146 PRINT #G #5 #H #5 #I
147 PRINT ""

150 <i>REM Validate board</i>
151 IF A&B&C LET W=A
152 IF D&E&F LET W=D
153 IF G&H&I LET W=G
154 IF A&E&I LET W=A
155 IF G&E&C LET W=G
156 IF A&D&G LET W=A
157 IF B&E&H LET W=B
158 IF C&F&I LET W=C
159 RETURN
</pre>

<ul>
	<li><a href='../etc/basic.tal.txt' target='_blank'>View source</a>, Uxntal.</li>
	<li><a href='https://rabbits.srht.site/tiny-basic/basic.rom' target='_blank'>Download ROM</a>, 4kb.</li>
	<li><a href='http://www.ittybittycomputers.com/IttyBitty/TinyBasic/TBuserMan.htm' target='_blank'>TinyBASIC User Manual</a></li>
	<li><a href='https://www.msx.org/wiki/Category:MSX-BASIC_Instructions' target='_blank'>MSX BASIC Commands</a></li>
	<li><a href='https://beebwiki.mdfs.net/VDU_23' target='_blank'>BBC Micro VDU 23</a></li>
</ul>

<img src="../media/refs/beasts19.png">
<style>
span.line { background:#ffdd44; color:black }
span.cmd { background:#11eeaa; color:black }
span.link { background:white; color:black }
</style>
