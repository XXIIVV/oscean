<h2>10 PRINT "Hello World"</h2>

<p>This guide is written specifically for the <a href='https://git.sr.ht/~rabbits/tiny-basic' target='_blank'>Sunflower BASIC implementation</a>, but it should still give a general idea of how to use the language's primitives which are also found in most BASIC implementations.</p>

<figure>
	<img src='../media/refs/vogue-basic.jpg' width='300'/>
	<figcaption>Typical BASIC Programmer</figcaption>
</figure>

<h3>Introduction</h3>

<p>A BASIC program begins with line numbers, control-flow is done by jumping to absolute line numbers which point to compiled BASIC code data. 0 is not a valid line number.</p>

<pre>
<span class='line'>1</span> <span class='cmd'>REM</span> <i>This is a comment.</I>
<span class='line'>2</span> <span class='cmd'>LET</span> I:I+1, F:I%3=0, B:I%5=0
<span class='line'>3</span> <span class='cmd'>IF</span> F PRINT "FIZZ";
<span class='line'>4</span> <span class='cmd'>IF</span> B PRINT "BUZZ";
<span class='line'>5</span> <span class='cmd'>IF</span> F+B=0 PRINT I;
<span class='line'>6</span> <span class='cmd'>PRINT</span> ""
<span class='line'>7</span> <span class='cmd'>IF</span> I<100 GOTO 2
<span class='line'>8</span> <span class='cmd'>END</span>
</pre>

<p><b>Expressions</b> can include numbers, variables and arithmetic operators. Numbers are decimal, but can be prefixed with <kbd>$</kbd> for <a href='hexadecimal.html'>hexadecimal</a>, there are no <a href='notation.html'>precedence rules</a>.</p>

<pre>
10 LET A:6+7
20 PRINT 52+$20*A
30 END
</pre>

<p>Valid expressions arithmetic operators are <kbd>+-*/%</kbd>, bitwise operators are <kbd>&|</kbd>, logic operators are <kbd>&lt;&gt;=!</kbd>. The smallest number is -32768, the largest number is 32767.</p>

<h3>Interpreter</h3>

<p>The interpreter below allows you to play with the examples on this page.</p>

<iframe height='384' width='624' src="../etc/uxn5/index.html#r=bKABYIAGN6Dg8YAIN6Dg3oAKN6DwSoAMN6ACcIAiN6ABgIAkN4AiNoBXYAeqgCQ2gEhgB6JgC_tgC6FgCV1gCdmgB0aAEDegAaGAgDeAdBAgAARgCekAYAGeoAB0YASsAABUaW55QkFTSUMKQSCBB38gaW50ZXJwcmV0ZXIKQnkgRGV2aW5lIEx1IExpbnZlZ2EKMjkgQXVnIDIwMjUAAICCNiagAXYpIAAFImALwgBgBlUCAGAAi69gAHugDrKgDoi0NO9gDJYgAA0hIaog__EiImKgAABsYiM0oAAEOGyAKDagDrCgDojgAADPgAMcIFIAA2AKYu-gAAM8gGA_oAAgOIAoN7Q0YAmqISFBqiD_2yIiYoAoN2AKHmAKG6APDGAJkWAKEkAKNaAAAjk0YAmDYAoEQAonlIAgCiAAAWwhQP_0lIAIBpSALAggAAeCFyoFIZQg_-hsYAA5JGD_4JQPJE9gAhudIAACImyAETOACDMhYAAegAQzoAAAggIELiRg_7iBJxgB850g_9oibGD_qJSAJAggADqUYAt4IAARggYgEKAAACegD35ACLOhJBRABi7gAADgAAp6wACUgDAZD3ghgAYUgAoLIP_pb2wh4AAAwEB_wACUYAtDgBtRYAs8ASD_7G9soBlUoEAAYAtzYAS9QAXHgCA_oBlUOGxg_4hg__ImoFlUKyAACyIioA91oA9LQAhHL2D_GZQgAA4ioAAA72FhNaAAAG81bGD-doAMTGD-_ZQgAAeg__5vNSJsoAemNG81QAQuoAAEOGygWVQk4AAAtB0gAAZg_-xAABhh3U8gAAwiImKgD0KgD1pAB-qhITQnNC6qIP_ZIiJigDEWoBlUtKAAACggAAwmJqAZVDmAAj9gCe6AUAaqIP_kIiJshBUFQAeIoAAAgHIMOWAILKAO_2AH4kAIiYJDDaAZVKoMJCKAFTOgWVSrgAkICDOgA_eAIDdsgDQBAACDZAQNJmD_roCtBIDrMyIAg2Ui4yIiYAhAoAAAgCA3ADhsOWw6bDxsPWyggACvOCRvOCqAAASFDAArgAwAKIARACmAFn-7OjlsnYAACCAAEWAAF686JGAAEa86eiQ7bzpsITsnoA9fQAb1JoAPP6D__zqgAAE9bA-gDrKUzwggAAchISGUIP_zITRCbA-WD5oiYAQqoBlUQP63D8sP0GD9lJQgAAciYP8eQAekYP2fL2D9gpQgAAsib2D-O2D-6UAHjmD9iVxg_i8hI29g_ilg_vxAB3wQNBA6ImAIR0D-CRBYEFwiQP5lEIQQiGD9R5QgAAQiQP5WlIAZEyFg_TeUgDoIIAAJoA-FYAZUQP4-IWD9PIAAYAOwQP_RELkQvGD9LR2CMjkjQAkVEOoQ72D9GyZg_cA0HSAADCIjoPAAJKAPS0AGFyMjQP2qERcRGyIioP_wbBE3ET1g_PAmYP2ViypsBewjJKAABDhgAkBA_XgRaxFyIiJAAlARoBGmoAENE2D8omAAEpQg__YioAAACCAAA2AGpUD9pJSAOwkgAAYhoADpE2yUgCIJIAAEIUAF1JSAIwkgAAghYPyDA0AF5pRgCCcgAAZg_HVABfaUgIBAEQagEaBABXZsEf8SBWADBGADXoCgVxI1Ejpg_DZgAWOgAHRgB90gAAmgAHSgD1VABUtg_NFgAZdgAnGgAHSAqDegAAGAqjfgBlHArICj95YgAAxCYgJg_XhgBPFA_QuAAGABtED_5xJcEmFg--WFLwlg_SdA_O0ShBKKgoYzEmD74YAIN2D724AKN2D71YAMNyJA_MwSvBLAIqAAIKAMOjVgA_xgBb5A_LcS1BLZYPuynYG_CQ0moAP_PIAoNyaAIwMiYPuaghcACIIXOSo3IiJA_IQS_RMCYPt_IwOgC90VQPx0Ex0TImD7VmADDED8Zw83AWFg-0mUIAAHImD63kD8VWD6rZ2A8n8PjmAEW0D8RSNg-xBA_D4TSxNQYPs5oAD_PIAwP6AUEDgvYPsRlCAABSJiQPwfYPse72FhNUD_6qAKEhaJIAAIIqAAdGD-tgBgAAICAIB0BoCzCSAACiKgD3WgD1BABACBgOoTEWygdOQTlAYgAAVg_9sibGD_1iFA_--UIAACIhNslAaAHwogAAcCIoAAQAAHYAAEIYBeBllUJqDv-CmFSxtLQAO0oYDoMxVsoFlUgOAyJzlABqigGQImoBlChSUdETdAA46hIYDnMzVsgOIyJqAZAikgAA0ioPAAoA9rgR5_b6AAAjkmgMUzNGwGgAgIIAAmBoAKCCAAfwaADQggAHiAIIsDIAAPgH6KAyAACAZgAHgGYACTAmwCoABvEgkgAAFsYAB3oAAmF2AEKYAotqAAIKoMJCIFN6AALxegASYXQAP-gMUQIAAWoAAAlIAgCyAACpRgBbEg-pZABdUibKAoAABg-cFg-ddgAMogAAQiQADrlCD_7CJsAmADv2D_xKAAAIAABoAEEzGAKgsGgD8JIAACImyBgPKBET3sEoABGQaA5RMRbGAC-kADkqAAQKAANEAFnYBBGQaAGgsgAAgCIqAPhUAChgYYgEAYMWwGgFIJIAAEAkAEGYAjgBQiMGxg-T2UYAUUgAAIIAAElGAAESGUIP_qImyAtAaABROAGxOBCRPECSAACgKgD3WgD0tAAjWBgOoTEYEiAuISC4BSNIAAbIGA7xMQbGD_6WD_fYDLEoDhEhlsoAAEOIDFMaAJroCQN6AJoIAQN6AJ2YCAN2ygASYXgOEQkDegAaGAgDegB0aAEDeAxTCA9jXFMWD_f0D5wKAAEhZg_6wgAANg_84AYALsgJYWIAABAICSNmD_lSAAB2ACzWD_tACAlDZg_4WBDwm9YP-kAACAghYGgP8UgIMWYP4iAIAABIDFECAAAiIAYP9dgU42fwAmYAPzIAAGoA9VQAFkJoCoNyZgAGuAqjegC90UgC89L2AAOoAUE4AaE4AoNoAOM6AZRIAsN4O2gLkBKDeACA4ZRICsN9cBiiD_9CJgAeeACDXiImJsYAPpoAAKObRgAAwPoAADODRgAANPBGxgA7kEYAO1gEAfHWxgA8agAAQ5NKBjaCggAAeBVQgIbKCAAKAAEGyFYAmAKjeggi4XoAAYhg8AkIAPgoAAGIAfCaAuF4AiNqAAGDmGMwCAhCMBgCSCGYMTgb8AIIU7CUABNKBGJhegGBKA3AIFL5eAAAcXbGD_fmD_5oDsNmABM2ABNqAO1mAAhmABJ6AO52AAfWD4h0ABG2ABGKAPMGAAbkABDyc0HSAAAyIibGAAo2ABLrSB2TJgAFNgASIhITRgAEpAAMugDzxgAEGAPGAAS2AAOYA-YABDgDpgAD5gAP5gAClgAKqgE4iChSIXgCi2oAAIOQU3bJSAIgggAAmUYAAWIZQg__AhbJQGIAADAoBpGQQhQP_xBoAKCSAABAJAAGqAAASAMD-gFBA4gMwbCS8XbAeAgByAAAggAA6ALWD_1KB__zyggAAkOYDZJYAAgCIToCcQYAAZoAPoYAAToABkYAANoAAKYAAHA4AwGED_o7uGgT0YDAaAMBhg_5SA_4DvEwI6OWygACCAKDeAKoClHDivBTdvgCQ2oAAYOSsgAANA_kJsYAAXYP_aoBOAgM8AAYjPgxMAAojjgu0AOIAdLBImF4BAoBOAQAAiYP_xoBYmF4DBoBPQgJYWIAAEIqATkICSNoAKM4CUNoAOM4DlBwAAoAAEOYAohQkdKjeAL5cXbKAAxhagAMUWgGA_PqAAxBaAwD8-gCIzgQoLBD-gAMMWJjg-oADCgSAVgMA2gKA_PoAPM2ygAAAmgFA_PiaAA4A4JAAmgO0zJoABPz4-gPGzAmygDWuAqDegAAKAqjegDVmArDegDV-BBQplgKw3gKI2HSAAAYBEAYAIgJsBgAqBBQwMN2wudGhlbWUAoA2TgT8AAYE_AIyAMwGjFoAyF4AAYPp5QP_rLnNuYXJmAGAALYAgYABItIDdAzRgABCADUQ6ISE0YAAFgApAAC-UBiAAAwIibGAAJCFA__Hg_wCgAAq7rzo5b0GdIP_zIgOAMBhgAAhHWM8g__NibIAbE6AOCICuN2yGfgEOCIJ-CWyAAAZgABIgAAuCBhQEgCQJbAKAAGyAQRmAGgtsgDAZgAqBBjkGgAkKDGyAJxkGgAoZgAUKDGwCgP9slCAAAiFsIUD_9mDzY50gAAcjoA-OQP0QLC-U1E8JIAAGYSGUgIQSFIAACGyACzOADDOgDoCAAjdsAIMAfwSbBKkE4wTuBPYFKQU7BVwFZgWOBZcF-QZYBgcGbgaPBqQG1wcdBucG9CsEJi0EKCoEKi8EWCYELHwELjwEMD4EPT0ESiEETyUEVAAAAFNVTkZMT1dFUiBCQVNJQyAAVFlQRSAiSEVMUCIgRk9SIElORk8gfyAAIEJZVEVTIEZSAkVFCockBSBQUklOVIIqgQoPIERFVEFJTFMAUkVBRFkuAIBJNABFUlJPUgBJTkZJTklURQBMSU5FAFBBVEgARklMRQBMT09QAERJVi1CWS1aRVJPAFVOREVSgJYCAE9WgwhSTlVNQkVSAFZBUklBQkxFAENPTU1BTkQAUlVOAH9SVU4gQmVnaW4gZXZhbHVhdGlvbiBmcm9tIHNtYWxsZXN0IGxpbmUgbnVtYmVyLgBMSVNUAH-ABQAghAAVUHJpbnQgZW50aXJlIHByb2dyYW0uCoIjATEyiCOBSQExMoMbBTIwLCAzMIgbEnMgMjAgdG8gMzAuAENMRUFSAH-BBgYgIEVyYXNljGMuAFJFTQB_UkVNIFRoaXMgaXMgYSBjb21tZW50Li4gIExlYXZlIHJlbWFyay4ATEWAtx1FVCBYOjEyLCBZOkErMSAgQXNzaWduIGV4cHJlc3OA-0N0byB2YXJpYWJsZS4ASUYAf0lGIEE-QiBQUklOVCBDICBFdmFsdWF0ZSBvbmx5IHdoZW4gbm90IHplcm8uAEdPVE8Af4AFACCBXwlDb250aW51ZSBlgjWAYQBhguwRLgBFTkQAf0VORCAgVGVybWlugFSGJ4BMAlNVQoBNAlNVQoJOhXsYc3Vicm91dGluZSB1bnRpbCBSRVRVUk4uAIIHAQB_gg-SgANmcm9th0EBLgCB2wEAf4LiCSJBIHN0cmluZyKCwhBEaXNwbGF5IHRleHQgd2l0aIG9BmJyZWFrLgqNMwE7IIAAiDMILgBJTlBVVAB_gQYKIFgsIFkgIFBhdXOJk4LFEXVzZXIgaW5wdXQuAExPQUQAf4AFgxEbYmFzICBMb2FkIGJhc2ljIGZpbGUuAFNBVkUAf4AFAyBvdXSFJwNTYXZliScGQ09MT1IAf4EGSSAkNTBmMiwgJGIwZjksICRhMGY4ICBTZXQgaW50ZXJmYWNlIGNvbG9ycy4AQ0xTAH9DTFIgIENsZWFyIHNjcmVlbi4ARFJBVwB_gAUFIDMyLCA0g0ALZHJhd2luZyBwb3NpgNgHLgBNT0RFAH-ABQEgMoojC21vZGUuAFBJQ1QAf4AFGyBpbWFnZTIweDIwLmljbiAgUGFpbnQgMS1iaXSCGwcuAFBPS0UAf4AFFSAkMTAsICQxMjM0LCAkNDU2NywgLi6DhQ5hdGEgZnJvbSAkODAuAP-DAAGqVYIBBwAAAAAIFBQXgAcDAAgICIEHAgAAwIMHHQAQECAQEAgHAA8PHw8PBwAAIBAQECAgwADA4ODgwIUlAAiCPwEAALM_wP4HAGCAAAUAYABmZmaC_x1s_mxs_mwAGD5gPAZ8GAAAZmwYMGZGADhsOHDezHaAL4H_ARwwgAADHAA4DIAABjgAAGY8_zyAQgQYGH4YGIP_ATAwgCwAfoX_HBgYAAMGDBgwYMAAPGZudmZmPAAYOBgYGBh-ADxmgBgVfgB-DBgMBmY8AAwcPGx-DAwAfmB8BoAPAzxgYHyALwB-gD8FMDAAPGZmgAKABwE-BoB_gHSDAwMYGDAAgGUCMBgMgn4FfgAAMBgMgHmCZwEAGIB_D2puYD4AGDxmZn5mZgB8ZmaAAhcAPGZgYGBmPAB4bGZmZmx4AH5gYHxgYH6DBwpgAD5gYG5mZj4AZoE2AmYAPIC-BRg8AD4GBoGnCGZseHB4bGYAYIEADn4Axu7-1sbGxgBmdn5-boAvAGaAAAA8gW-AT4APAnZsNoF_AGyBHwFgPID_AH6BVwAYgGcAZoNvDGZmPBgAxsbG1v7uxgCADAI8ZmaAh4CCAQB-gN0EYH4APDCAAAI8AMCA_QQGAwA8DIAABjwAEDhsxgCFAAX-AABgMBiCDwk8Bj5mPgBgYHxmgP8KAAA8YGBgPAAGBj6BdwoAADxmfmA8ABwwfIBZCAAAAD5mZj4GfIIvBGYAGAA4gf8BGACBsARwYGBmbID_gBWAFwUAAOz-1saAeoIvgE-A_4IPAXxggU8CZj4GgB8CYGBggF8NYDwGfAAAGH4YGBgOAACB-YCHgv8GAADGxtZ8bIAXAjwYPIBPgT4PfAAAfgwYMH4AHDAwYDAwHIKNGRgYGDgMDAYMDDgAAABg8p4MAAAQOHz-fDgQgvoEAAAAAwODCgjgAAAYGDx-fn6DGgAHgiIEwMABAQGBLQj4_P7__38_H_-BAAzDAB8_f____vz4gICAgzEkDz8_DwcA_v78_Pz8_v4AAEIAAEI8AH9_Pz8_P39_AODw_Pzw4IJ5AgEBAYQ_AQDDglGEX4GaAoCAgISZgzEIAH5-fjwYGBkbgpgD4MDAwIXEg7GCygcenNh4OBAIEA" style='border:0' allowfullscreen></iframe>

<h3>Variables</h3>

<img src='../media/generic/sunflower.png' style="float:right;width:160px;margin-left: 30px;"/>

<p><b>Variables</b> are single uppercase letters of the alphabet. Some variables have special properties, here is the complete list:</p>

<ul>
	<li><kbd>R</kbd>, reads a random number.</li>
	<li><kbd>W</kbd>, reads the screen width.</li>
	<li><kbd>H</kbd>, reads the screen height.</li>
</ul>

<p>For example, if you wanted to do a program to roll a 6-sided dice using the <kbd>R</kbd> variable.</p>

<pre>
10 PRINT "You rolled " R%6+1 "."
30 END
</pre>
<pre style='margin-top:-29px'>
You rolled 5.
</pre>

<h3>Loops</h3>

<p><b>Loops</b> are created by jumping back to the start of the loop with a GOTO, until a specific condition is met with IF. Using a variable as counter, a program can loop over a number of lines five times:</p>

<pre>
10 LET I:0
20    PRINT "Count: " I
25    LET I:I+1
30    IF I&lt;5 GOTO 20
40 END
</pre>
<pre style='margin-top:-29px'>
Count: 0
Count: 1
Count: 2
Count: 3
Count: 4
</pre>

<p>Loops can also be nested using two counters:</p>

<pre>
10 LET A:0
20    LET B:0
21        PRINT A ", " B
22        LET B:B+1
23        IF B<3 GOTO 21
30    LET A:A+1
31    IF A<3 GOTO 20
32 END
</pre>

<h3>Functions</h3>
<p><b>Functions</b> are created with GOSUB, similarly to GOTO, this operation moves evaluation to a different line, except that they keep a return address in memory to be jumped back to upon RETURN.</p>

<pre>
1 LET N:5
2 GOSUB 50
3 END

49 <i>REM Fib(N)</i>
50 LET A:3, B:1
51     LET C:A, A:3*A-B, B:C, I:I+1
52     IF I&lt;N GOTO 51
53 PRINT "Result: " C
54 RETURN
</pre>
<pre style='margin-top:-29px'>
Result: 144
</pre>

<h3>Interaction</h3>

<p>The <kbd>INPUT</kbd> statement, will halt the execution and wait for an input. This can be used to store a value into a variable. For example, to capture the position of the mouse cursor: </p>

<pre>
10 PRINT "Touch the screen"
20 INPUT X, Y
30 PRINT "You touched at: " X ", " Y
50 PRINT "Press a button"
60 INPUT B
70 PRINT "You pressed: " B
80 END
</pre>

<img src="../media/refs/basic.png" width='200'>

<h3 id='manual'>Manual</h3>

<table border='1'>
	<tr>
		<th rowspan='6'>Hypervisor</th>
		<th rowspan='2'><code>RUN</code></th><td>Used to begin program execution at the lowest line number.</td></tr>
	<tr><td><pre>RUN</pre></td></tr>
	<tr><th rowspan='2'><code>LIST</code></th><td>Causes part or all of the user program to be listed. If no parameters are given, the whole program is listed. A single expression parameter in evaluated to a line number which, if it exists, is listed. A two expressions will print a range of lines.</td></tr>
	<tr><td><pre>LIST 200
LIST 10,30
LIST</pre></td></tr>
	<tr><th rowspan='2'><code>CLEAR</code></th><td>Formats the user program space, deleting any previous programs. If included in a program the program becomes suicidal when the statement is executed.</td></tr>
	<tr><td><pre>CLEAR</pre></td></tr>
	
	<tr>
		<th rowspan='10'>Core</th>
		<th rowspan='2'><code>REM</code></th><td>Permits to add remarks to a program source.</td></tr>
	<tr><td><pre>REM This is a comment.</pre></td></tr>
	<tr><th rowspan='2'><code>LET</code></th><td>Assigns the value of an expression to a variable.</td></tr>
	<tr><td><pre>LET A:123/2, B:$20%2</pre></td></tr>
	<tr><th rowspan='2'><code>IF</code></th><td>If the result of the expression is not zero, the statement is executed; if False, the associated statement is skipped.</td></tr>
	<tr><td><pre>IF A>B-2 PRINT "A is greater."</pre></td></tr>
	<tr><th rowspan='2'><code>GOTO</code></th><td>Changes the sequence of program execution.</td></tr>
	<tr><td><pre>GOTO 50+A>B</pre></td></tr>
	<tr><th rowspan='2'><code>END</code></th><td>Must be the last executable statement in a program.  Failure to include an END statement will result in an error stop after the last line of the program is executed.</td></tr>
	<tr><td><pre>END</pre></td></tr>
	
	<tr>
		<th rowspan='4'>Subroutines</th>
		<th rowspan='2'><code>GOSUB</code></th><td>Changes the sequence of program execution, and remembers the line number of the GOSUB statement, so that the next occurrence of a RETURN statement will result in execution proceeding from the statement following the GOSUB.</td></tr>
	<tr><td><pre>GOSUB 220</pre></td></tr>
	<tr><th rowspan='2'><code>RETURN</code></th><td>Transfers execution control to the line following the most recent unRETURNed GOSUB.  If there is no matching GOSUB an error stop occurs. </td></tr>
	<tr><td><pre>RETURN</pre></td></tr>
	
	<tr>
		<th rowspan='4'>I/O</th>
		<th rowspan='2'><code>PRINT</code></th><td>Prints the values of the expressions and/or the contents of the strings in the console. To print the result of an expression as an <a href='ascii.html'>ascii</a> character, use <kbd>#$41</kbd>, to print the character A, end with a semi-colon to print without a linebreak.</td></tr>
	<tr><td><pre>PRINT "The result is: " A+B</pre></td></tr>
	<tr><th rowspan='2'><code>INPUT</code></th><td>Halts evaluation, and assigns the result of expressions to each of the variables listed in the argument. Expressions are entered sequencially and separated by a line break, a list of two arguments, will expect two input lines.</td></tr>
	<tr><td><pre>INPUT X, Y</pre></td></tr>
	
	<tr>
		<th rowspan='4'>File</th>
		<th rowspan='2'><code>SAVE</code></th><td>Exports your program to example.bas.</td></tr>
	<tr><td><pre>SAVE example.bas</pre></td></tr>
	<tr><th rowspan='2'><code>LOAD</code></th><td>Imports the example.bas program, replaces your current program.</td></tr>
	<tr><td><pre>LOAD example.bas</pre></td></tr>
	
	<tr>
		<th rowspan='12'>Screen</th>
		<th rowspan='2'><code>COLOR</code></th><td>Sets the interface RGB colors, see <a href='theme.html'>theme</a>.</td></tr>
	<tr><td><pre>COLOR $50f2, $b0f9, $a0f8</pre></td></tr>
	<tr><th rowspan='2'><code>CLS</code></th><td>Clears the screen.</td></tr>
	<tr><td><pre>CLS</pre></td></tr>
	<tr><th rowspan='2'><code>DRAW</code></th><td>Sets position of drawing.</td></tr>
	<tr><td><pre>DRAW 100, 320</pre></td></tr>
	<tr><th rowspan='2'><code>MODE</code></th><td>Sets drawing mode, see <a href='varvara.html#screen'>varvara</a>.</td></tr>
	<tr><td><pre>MODE 04</pre></td></tr>
	<tr><th rowspan='2'><code>POKE</code></th><td>Stores data into the font memory bank, the first value is an <a href='ascii.html'>ascii</a> byte value.</td></tr>
	<tr><td><pre>POKE 1, $1c1c, $087f, $0814, $2241</pre></td></tr>
	<tr><th rowspan='2'><code>PICT</code></th><td>Draws a <a href='icn_format.html#filename'>picture</a> from a file, uses MODE.</td></tr>
	<tr><td><pre>PICT image10x10.icn
PICT image12x18.chr</pre></td></tr>
	
</table>

<h3>Tic-Tac-Toe</h3>

<p>Here's a complete example that uses everything above and implements a graphical tic-tac-toe game.</p>

<pre>
1 <i>REM Create Assets: play[012] grid[567]</i>
2 POKE 1, $c3e7, $7e3c, $3c7e, $e7c3
3 POKE 2, $187e, $7eff, $ff7e, $7e18
4 POKE 5, $1818, $1818, $1818, $1818
5 POKE 6, $0000, $00ff, $ff00, $0000
6 POKE 7, $1818, $3cff, $ff3c, $1818

7 <i>REM Game Loop</i>
8 GOSUB 140
9 GOSUB 120
10 IF W=0 GOTO 8
11 PRINT "WINNER: " #W
12 END

120 <i>REM Request Player Turn</i>
121 PRINT "Player " #P+1 " input position[0-8]:"
122 INPUT X
123 IF X>8 RETURN

124 LET Y:P+1, P:P=0
130 IF X=0 LET A:Y
131 IF X=1 LET B:Y
132 IF X=2 LET C:Y
133 IF X=3 LET D:Y
134 IF X=4 LET E:Y
135 IF X=5 LET F:Y
136 IF X=6 LET G:Y
137 IF X=7 LET H:Y
138 IF X=8 LET I:Y

140 <i>REM Draw Grid</i>
141 CLS
142 PRINT #A #5 #B #5 #C
143 PRINT #6 #7 #6 #7 #6
144 PRINT #D #5 #E #5 #F
145 PRINT #6 #7 #6 #7 #6
146 PRINT #G #5 #H #5 #I
147 PRINT ""

150 <i>REM Validate board</i>
151 IF A&B&C LET W:A
152 IF D&E&F LET W:D
153 IF G&H&I LET W:G
154 IF A&E&I LET W:A
155 IF G&E&C LET W:G
156 IF A&D&G LET W:A
157 IF B&E&H LET W:B
158 IF C&F&I LET W:C
159 RETURN
</pre>

<ul>
	<li><a href='../etc/basic.tal.txt' target='_blank'>View source</a>, Uxntal.</li>
	<li><a href='https://rabbits.srht.site/tiny-basic/basic.rom' target='_blank'>Download ROM</a>, 4kb.</li>
	<li><a href='http://www.ittybittycomputers.com/IttyBitty/TinyBasic/TBuserMan.htm' target='_blank'>TinyBASIC User Manual</a></li>
	<li><a href='https://www.msx.org/wiki/Category:MSX-BASIC_Instructions' target='_blank'>MSX BASIC Commands</a></li>
	<li><a href='https://beebwiki.mdfs.net/VDU_23' target='_blank'>BBC Micro VDU 23</a></li>
</ul>

<img src="../media/refs/beasts19.png">
<style>
span.line { background:#ffdd44; color:black }
span.cmd { background:#11eeaa; color:black }
span.link { background:white; color:black }
</style>
