<h2>10 PRINT "Hello World"</h2>

<p>This guide is written specifically for the <a href='https://git.sr.ht/~rabbits/tiny-basic' target='_blank'>Sunflower BASIC implementation</a> of the TinyBASIC compiler, but it should still give a general idea of how to use the language's primitives which are also found in most BASIC implementations.</p>

<figure>
	<img src='../media/refs/vogue-basic.jpg' width='300'/>
	<figcaption>Typical BASIC Programmer</figcaption>
</figure>

<h3>Introduction</h3>

<p>A BASIC program begins with line numbers, control-flow is done by jumping to absolute line numbers which point to compiled BASIC code data. 0 is not a valid line number.</p>

<pre>
<span class='line'>15</span> <span class='cmd'>LET</span> A=0
<span class='line'>20</span> <span class='cmd'>PRINT</span> "Hello BASIC"
<span class='line'>25</span> <span class='cmd'>LET</span> A=A+1
<span class='line'>30</span> <span class='cmd'>IF</span> A=10 GOTO 50
<span class='line'>40</span> <span class='cmd'>GOTO</span> 20
<span class='line'>50</span> <span class='cmd'>END</span>
</pre>


<iframe height='624' width='384' src="../etc/uxn5/index.html#r=RqABOoAGN6Dg8YAIN6Dg7oAKN6DwSoAMN6ACcIAiN6ABgIAkN2AJ6GAKJWAIPKAFtoAQN6ABe4CANwAAVGlueUJBU0lDCkEggQdrIGludGVycHJldGVyCkJ5IERldmluZSBMdSBMaW52ZWdhCjI0IEF1ZyAyMDI1AACAgxZgBOcAYAAyr2AAIqAM4KAMuLQ072AK3yAADSEhqiD_8SIiYqAAAGxiIzQhIWyUgCAKIAABbCFA__SUgAgGlIAsCCAAB4IXKgUhlCD_6GxgADkkYP_glA8kT2ABuJ0gAAIibIARM4AIMyFgAB6ABDOgAACCAgQuJGD_uIInF5CdIP_aImxg_6iUgCQIIAA6lGAKEiAAEYIGIBCgAAAnoA24QAeQoSQUQAUa4AAA4AAKesAAlIAwGQ94IYAGFIAKCyD_6W9sIeAAAMBAf8AAlGAJ3YAbVmAJ1gEg_-xvbKATtaBAAGAKFUAEtoAgP6ATtThsoO_4oBO1OWxg_4Ng_-omoFO1KyAACyIioA2voA3QQAcfL2D_FJQgAA4ioAAA72FhNaAAAG81bGD-yoAMK2D--KAGBTRvNUADJrQdIAADQAAGoSE0JzQsoAAEOGygU7UkYP_mqiD_-SIigA0OoBO1tKAAACggAAQmYAAwgCQDqiD_7IwcAgwmJoCUBYACP2AIhoMkA-QiImyEFRhABm04bDlsOmw8bD1soIAArzgkbzgqgAAEhQwAK4AMACiAEQApgBZ_uzo5bJ2AAAggABFgABevOiRgABGvOnokO286bCE7J6AN5UAGNSaADz-g__86oAABPWwPoAzglM8IIAAHISEhlCD_8yE0QmwNcSKgE7VA_ycNP2D9_pQgAAQiQP8VlIAWEyFg_e6UgD0IIAAGoA2_QAXoIWD99oAAYANWQP_UDUgJIkD-7g1MYP3jHYEzIP7hQAhtDU9g_dMmYP51NB0gAAwiI6DwACSgDdBABawjJIDzDmACD0D-WA1DYP2tJmD-T4wleYYjI0D-OQ1hIiJAAgINVSJgBsVA_h0NW2ADKWADeaD_8GwNaGD9WZQgAAciYP6DQAYqYP1kYP4HI2D-uEAGHQ3foAENE2D9OGAAEpQg__YioAAACCAAA2AF2UD-QpSAOwkgAAghoADpE0AF8JSAIgkgAAQhQAUxlIAjgRkVYP0XA0AFQ5RgB1UgAAZg_QlABUiUgIBCCwagDd9ABOdsDW0iIoGGJYRg_OsjA6AKDhVA_egNf2D83SaAKDegCnQ1YPzSgCo3IkD90Q11gjwREmD8v4AIN2D8uYAKN2D8s4AMgB5_sg17ImADwED9qQ2JYPyeYANuYPyYYANoYPySYANiYPyMYANcIkD9iw2QYPxnYAL2QP2ADZpg_FxgAIegAHRgBpwgAAmgAHSgDdpABE5g_PdgAKlgAYOgAHSAqDegAAGAqjfgBZvArICj95YgAAlCYgJgBABA_TyAAGAAyUD_6g0DlWD8EIUqDmD9U0D9IKAKEhaJIAAIIoBgSP-TAGAAAgIAoAB0BoCzCSAACiKgDa-gDdVAA9-BgOoTMWxgBnWgAHRABq-UBoAfCiAABwIigABAAAdgAAQhQP_qoFO1JqDv-CmFORvQQAOloYDoMxVsoFO1gOAyJzlABl6gE2smoBOrhiUcT0ADf6EhgOczNWyA4jImoBNrKSAADSKg8ACgDaWBHn9goAACOSaAxTM0bAaACAggACYGgAoIIAB_BoANCCAAeIAgiwMgAA-AfooDIAAIBmAAeAZgAJMCbAKgAG8SCSAAAWxgAHegACYXYAP-gCi2oAAgqgwkIgU3oAAvF6ABJhdAA9OAxRAgABagAACUgCALIAAKlGAFXyD7r0AFiyJsoCgAAGD61WD662AA2CAABCJAAPOUIP_sImwCYANxYP_EoAAAgAAGgAQTMYAqCwaAPwkgAAIibIGA8oERTOwSgAEZBoDlExFsYALXQANnoABAoAA0QAVTgEEZBoAaCyAACAIioA2_QAJ3BhiAQBgxbAaASAkgAAUCgCQ2bAaAUgkgAAQCQAQiBoBXghYCIjZsgDuALDEwbGD6OZRgBKqAAAggAASUYAAHIZQg_-oibIC0BoDECSAACgKgDa-gDdBAAhiBgOoTEYEYAuISC4BUMYAAbIGA7xMQbGD_6WD_b4DLEoDhEhlsoAAEOIDFMaAIAYCQN6AIKYCAN2xgAuCgASYXgOwKkDegAXuAgDeAxTCA-zfFMUD62mACzYAAgJYWBoD4E6AAASggAAEAgJI2YP-lAoCUNmD_niAAA2D_ugCgAIIWBiAADiKAg4AHCQICAGD-KgBg_36BHy2aACZgA7MgAAagDdpAAWgmgKg3oAAIgKo3YABkgBQTgCATgCg2gBQzoBOtgCw3g48F4AoOVMAvgJgEKDegAACAGwusN9cBiiD_9CJgAdiACEriImJsoBOtoSGvgPgzNW-gE7UpIAARoBOtJoAsN4DlM6AKDhSALxdsYAOJoAAKObRgAAwPoAADODRgAANPBGxgA1kEYANVgEAfHWyFZwmAKjeggi4XoAAYhg8AkIAPgocAGIAfCaAuF4AiNqAAGDmGMwCAhCMBgCSCGYMTgcwAIIU7CUABHqBGJhegEnuA6QIFL5eAAAcXbGD_fmD_5oD5f2AA9GABGqANBGAAcmAA6KANFWAAaWD482AAnKANJmAAXWAA02AA0KANOGAAUUAAx2AAhGABErSgAAI5NGAAP2ABBiEhNGAANkAAtaANn2AALYA8YAA3YAAlgD5gAC-AOmAAKmAA4mAAFUAAlJSAIgggAAmUYAAWIZQg__AhbJQGFiAAAwIibGAABCFA__GAAASAMD-gDnk4gK0bCS8XbAeAgByAAAggAA6ALWD_36B__zyggAAkOYDnJYAAgCIToCcQYAAZoAPoYAAToABkYAANoAAKYAAHA4AwGED_rruGgT08DAaAMBhg_5-A_4DvEwI6OWxgADpgAANAACCgACCAKDeAKragAAg4rwU3b4AkNqAAGDkrIAADYP5YbKAN8YCLBAEvF4AogCMCOQU3hBMAAogTgh0AOIAdLBImF4BAoA3xQAAiYP_xoBYmF4DBoA45gJYWIAAEIqAN-YCSNoAKM4CUNoAOM4DoBwAAoAAEOYAohQkbKjeAL5cXbKALSICoN6AAAoCqN6ALNoCsN6ALPIEFEEKArDeAojYdIAABbKAAAIAIgEQBgAqBBSAMN2wudGhlbWUAoADGFqAAxRaAYD8-oADEFoDAPz6AIjOBCgsEP6AAwxYmOD6gAMKBIAmAwDaAoD8-gA8zgFEHJoBQPz4mgAOAOCAAJoDtMyaAAT8-PoDxswJsYAAtgCBgAEi0oAACOTRgABCADUQ6ISE0YAAFgApAAC-UBiAAAwIibGAAJCFA__Hg_wCgAAq7rzo5b0GdIP_zIgOAMBhgAAhHWM8g__NibIAXE6AMEICuN2yB7QABgO0SDBCApDeAAGAAJgFsBmAAEiAAC4IGFASAJAlsAoAAbIBBGYAaC2yAMBmACoEGQQaACQoMbIAnGQaAChmABQoMbAKA_2yUIAACIWwhQP_2pmD_8iQhOWxg9RqdIAAHI6ANyED9SywvlNRPCSAABmEhlICNEhSAAAhsgAszgAwzoAyVgAI3bACDAAKAFjOEFwCtgBcAAYQYbwAAA7QEHgPiA-gD-AREBE0EPQRZBHYE2AOrBQUFJATuBOAFLQVLBaIFVisDNi0DOCoDOi8DaCYDPHwDPjwDQD4DTT0DWiEDXyUDZAAAAFNVTkZMT1dFUiBCQVNJQyAANjRLIFJBTSBTWVNURU0gIACDGHxCWVRFUyBGUkVFAFJFQURZLgBMRVQAR09UTwBSRU0ASUYAR09TVUIAQ0xFQVIASU5QVVQAUkVUVVJOAExJU1QARU5EAFJVTgBDT0xPUgBDTFMARFJBVwBNT0RFAFNQUklURQBQSUNUAFNBVkUATE9BRABFUlJPUgBVTkRFUoCiAgBPVoMIOU5VTUJFUgBWQVJJQUJMRQBDT01NQU5EAExJTkUAUEFUSABGSUxFAFBSSU5UAERJVi1CWS1aRVJPAP-DAAcAAAAACBQUF4AHAwAICAiBBwIAAMCDBx0AEBAgEBAIBwAPDx8PDwcAACAQEBAgIMAAwODg4MCFJQAIgj8BAACzP8D-BwBggAAFAGAAZmZmgv8dbP5sbP5sABg-YDwGfBgAAGZsGDBmRgA4bDhw3sx2gC-B_wEcMIAAAxwAOAyAAAY4AABmPP88gEIEGBh-GBiD_wEwMIAsAH6F_xwYGAADBgwYMGDAADxmbnZmZjwAGDgYGBgYfgA8ZoAYFX4AfgwYDAZmPAAMHDxsfgwMAH5gfAaADwM8YGB8gC8AfoA_BTAwADxmZoACgAcBPgaAf4B0gwMDGBgwAIBlAjAYDIJ-BX4AADAYDIB5gmcBABiAfw9qbmA-ABg8ZmZ-ZmYAfGZmgAIXADxmYGBgZjwAeGxmZmZseAB-YGB8YGB-gwcKYAA-YGBuZmY-AGaBNgJmADyAvgUYPAA-BgaBpwhmbHhweGxmAGCBAA5-AMbu_tbGxsYAZnZ-fm6ALwBmgAAAPIFvgE-ADwJ2bDaBfwBsgR8BYDyA_wB-gVcAGIBnAGaDbwxmZjwYAMbGxtb-7sYAgAwCPGZmgIeAggEAfoDdBGB-ADwwgAACPADAgP0EBgMAPAyAAAY8ABA4bMYAhQAF_gAAYDAYgg8JPAY-Zj4AYGB8ZoD_CgAAPGBgYDwABgY-gXcKAAA8Zn5gPAAcMHyAWQgAAAA-ZmY-BnyCLwRmABgAOIH_ARgAgbAEcGBgZmyA_4AVgBcFAADs_tbGgHqCL4BPgP-CDwF8YIFPAmY-BoAfAmBgYIBfDWA8BnwAABh-GBgYDgAAgfmAh4L_BgAAxsbWfGyAFwI8GDyAT4E-D3wAAH4MGDB-ABwwMGAwMByCjRkYGBg4DAwGDAw4AAAAYPKeDAAAABgYNDRifoL6BAAAAAMDgwoA4IAaAjx-foQaAAeCIgTAwAEBAYEtCPj8_v__fz8f_4EADMMAHz9____-_PiAgICDMREPPz8PBwD-_vz8_Pz-_gAAQkKAZg5_fz8_Pz9_fwDg8Pz88OCCeQIBAQGEPwEAw4JRhF-BmgKAgICEmYMxCAB-fn48GBgZG4KYA-DAwMCFxIOxgsoHHpzYeDgYGBg" style='border:0;width:512px;height:256px' allowfullscreen></iframe>

<h3>Expressions</h3>

<p>Expressions can include numbers, variables and arithmetic operators. Numbers are decimal, but can be prefixed with <kbd>$</kbd> for <a href='hexadecimal.html'>hexadecimal</a>, there are no <a href='notation.html'>precedence rules</a>.</p>

<pre>
10 LET A=6+7
20 PRINT 52+$20*A
30 END
</pre>

<p>Valid expressions arithmetic operators are <kbd>+-*/%</kbd>, bitwise operators are <kbd>&|</kbd>, logic operators are <kbd>&lt;&gt;=!</kbd>. The smallest number is -32768, the largest number is 32767.</p>

<h3>Variables</h3>

<p>Variables are single character uppercased letters of the alphabet. Some variables have special properties, here is the complete list:</p>

<ul>
	<li><kbd>R</kbd>, reads a random number.</li>
	<li><kbd>W</kbd>, reads the screen width.</li>
	<li><kbd>H</kbd>, reads the screen height.</li>
</ul>

<p>For example, if you wanted to do a program to roll a 6-sided dice using the <kbd>R</kbd>(random) variable.</p>

<pre>
10 PRINT "You rolled " R%6+1 "."
30 END
</pre>
<pre style='margin-top:-29px'>
You rolled 5.
</pre>

<img src="../media/refs/basic.png" width='200'>

<h3>Loops</h3>

<p>Using a variable as counter, a program can loop over a number of lines five times:</p>

<pre>
10 LET I=0
20 PRINT "Count: " I
25 LET I=I+1
30 IF I<5 GOTO 20
40 END
</pre>
<pre style='margin-top:-29px'>
Count: 0
Count: 1
Count: 2
Count: 3
Count: 4
</pre>

<h3>Interaction</h3>

<p>The <kbd>INPUT</kbd> statement, will halt the execution and wait for an input. This can be used to store a value into a variable. For example, to capture the position of the mouse cursor: </p>

<pre>
10 PRINT "Touch the screen"
20 INPUT X, Y
30 PRINT "You touched at: " X ", " Y
50 PRINT "Press a button"
60 INPUT B
70 PRINT "You pressed: " B
80 END
</pre>

<h3>Statements</h3>

<table border='1'>
	<tr>
		<th rowspan='6'>Hypervisor</th>
		<th rowspan='2'><code>RUN</code></th><td>Used to begin program execution at the lowest line number.</td></tr>
	<tr><td><pre>RUN</pre></td></tr>
	<tr><th rowspan='2'><code>LIST</code></th><td>Causes part or all of the user program to be listed. If no parameters are given, the whole program is listed. A single expression parameter in evaluated to a line number which, if it exists, is listed. </td></tr>
	<tr><td><pre>LIST 200</pre></td></tr>
	<tr><th rowspan='2'><code>CLEAR</code></th><td>Formats the user program space, deleting any previous programs. If included in a program the program becomes suicidal when the statement is executed.</td></tr>
	<tr><td><pre>CLEAR</pre></td></tr>
	
	<tr>
		<th rowspan='10'>Core</th>
		<th rowspan='2'><code>REM</code></th><td>Permits to add remarks to a program source.</td></tr>
	<tr><td><pre>REM This is a comment.</pre></td></tr>
	<tr><th rowspan='2'><code>LET</code></th><td>Assigns the value of an expression to a variable.</td></tr>
	<tr><td><pre>LET A=123/2, B=$20%2</pre></td></tr>
	<tr><th rowspan='2'><code>IF</code></th><td>If the result of the expression is not zero, the statement is executed; if False, the associated statement is skipped.</td></tr>
	<tr><td><pre>IF A>B-2 PRINT "A is greater."</pre></td></tr>
	<tr><th rowspan='2'><code>GOTO</code></th><td>Changes the sequence of program execution.</td></tr>
	<tr><td><pre>GOTO 50+A>B</pre></td></tr>
	<tr><th rowspan='2'><code>END</code></th><td>Must be the last executable statement in a program.  Failure to include an END statement will result in an error stop after the last line of the program is executed.</td></tr>
	<tr><td><pre>END</pre></td></tr>
	
	<tr>
		<th rowspan='4'>Subroutines</th>
		<th rowspan='2'><code>GOSUB</code></th><td>Changes the sequence of program execution, and remembers the line number of the GOSUB statement, so that the next occurrence of a RETURN statement will result in execution proceeding from the statement following the GOSUB.</td></tr>
	<tr><td><pre>GOSUB 220</pre></td></tr>
	<tr><th rowspan='2'><code>RETURN</code></th><td>Transfers execution control to the line following the most recent unRETURNed GOSUB.  If there is no matching GOSUB an error stop occurs. </td></tr>
	<tr><td><pre>RETURN</pre></td></tr>
	
	<tr>
		<th rowspan='4'>I/O</th>
		<th rowspan='2'><code>PRINT</code></th><td>Prints the values of the expressions and/or the contents of the strings in the console. To print the result of an expression as an <a href='ascii.html'>ascii</a> character, use <kbd>#$41</kbd>, to print the character A, end with a semi-colon to print without a linebreak.</td></tr>
	<tr><td><pre>PRINT "The result is: " A+B</pre></td></tr>
	<tr><th rowspan='2'><code>INPUT</code></th><td>Halts evaluation, and assigns the result of expressions to each of the variables listed in the argument. Expressions are entered sequencially and separated by a line break, a list of two arguments, will expect two input lines.</td></tr>
	<tr><td><pre>INPUT X, Y</pre></td></tr>
	
</table>

<h4>Display</h4>

<p>There is a handful of routines to draw graphics on the screen, to learn more about the limitations of the display, see the Varvara <a href='varvara.html#screen'>Screen Specs</a>.</p>

<table border='1'>
	<tr><th rowspan='2'><code>COLOR</code></th><td>Sets the interface RGB colors, see <a href='theme.html'>theme</a>.</td></tr>
	<tr><td><pre>COLOR $50f2, $b0f9, $a0f8</pre></td></tr>
	<tr><th rowspan='2'><code>CLS</code></th><td>Clears the screen.</td></tr>
	<tr><td><pre>CLS</pre></td></tr>
	<tr><th rowspan='2'><code>DRAW</code></th><td>Sets position of drawing.</td></tr>
	<tr><td><pre>DRAW 100, 320</pre></td></tr>
	<tr><th rowspan='2'><code>MODE</code></th><td>Sets drawing mode, see <a href='varvara.html#screen'>varvara</a>.</td></tr>
	<tr><td><pre>MODE 04</pre></td></tr>
	<tr><th rowspan='2'><code>SPRITE</code></th><td>Draws a <a href='icn_format.html'>sprite</a>, uses MODE.</td></tr>
	<tr><td><pre>SPRITE $1c1c, $087f, $0814, $2241</pre></td></tr>
	<tr><th rowspan='2'><code>PICT</code></th><td>Draws a picture from a file, uses MODE.</td></tr>
	<tr><td><pre>PICT image10x10.icn</pre></td></tr>
</table>

<h4>Memory</h4>

<p>Varvara BASIC is able to read and write source files, as well as export compatible roms.</p>

<table border='1'>
	<tr><th rowspan='2'><code>SAVE</code></th><td>Exports your program to example.bas.</td></tr>
	<tr><td><pre>SAVE example.bas</pre></td></tr>
	<tr><th rowspan='2'><code>LOAD</code></th><td>Imports the example.bas program, replaces your current program.</td></tr>
	<tr><td><pre>LOAD example.bas</pre></td></tr>
</table>

<ul>
	<li><a href='https://git.sr.ht/~rabbits/tiny-basic' target='_blank'>View source</a>, Uxntal.</li>
	<li><a href='https://rabbits.srht.site/tiny-basic/basic.rom' target='_blank'>Download ROM</a>, 4kb.</li>
	<li><a href='http://www.ittybittycomputers.com/IttyBitty/TinyBasic/TBuserMan.htm' target='_blank'>TinyBASIC User Manual</a></li>
	<li><a href='https://www.msx.org/wiki/Category:MSX-BASIC_Instructions' target='_blank'>MSX BASIC Commands</a></li>
	<li><a href='https://beebwiki.mdfs.net/VDU_23' target='_blank'>BBC Micro VDU 23</a></li>
</ul>

<style>
span.line { background:#ffee44; color:black }
span.cmd { background:#11eeaa; color:black }
span.link { background:white; color:black }
</style>
