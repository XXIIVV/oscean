<h2>Open computation that goes beyond open source, made from parts designed to
be recombined.</h2>

<p>Every layer of a malleable computing system is designed to support arbitrary
recombination, reused across environments and freely sharable with
others. Modifying such a system happens in the context of use, rather than
through some separate tool and skill set.</p>

<p>In contrast with monolithic applications, these amorphous computers are
finely tuned and thoughtfully crafted by their operator over the course of a
practice.</p>

<img src='../media/refs/super_chair.png'/>

<p>At its core, a malleable system is made of heterogeneous parts capable of
assemblage. Within the context of computation, it is an attribute shared by
different interoperable systems, not unlike programs that communicate via <a
href='unix.html#pipes'>unix pipes</a>, file browsers and some flow-based
programming environments.</p>

<center>
	<img src='../media/refs/pipe.png' style='width:75%'/>
</center>

<p>A malleable part is a transformer in a chain of transformers, and is itself
also made of equally interconnected links, nodes or agents. The more malleable
a system, the blurrier the distinction in the granularity of these parts.</p>

<table border="1">
	<tr><th colspan="4" style="text-align:center">Malleability</th></tr>
	<tr>
		<td style="background:black;color:white">Silo</td>
		<td>A system in which nodes will forcefully captures the message is a <b>silo</b>.</td>
	</tr>
	<tr>
		<td style="background:#a0ffa0;color:black">Shallow</td>
		<td>Messages can enter and leave a system that is not malleable itself,
this is malleability of a superficial kind.</td>
	</tr>
	<tr>
		<td style="background:#4fdd9a;color:black">Average</td>
		<td>Messages can flow freely between internal nodes of a malleable system, but
capabilities are restricted by domain, interface, or operator competency.</td>
	</tr>
	<tr>
		<td style="background:#47c199;color:black">Deep</td>
		<td>Messages can be passed seamlessly across every level of the system, the
division into <i>layers</i> has entirely vanished.</td>
	</tr>
</table>

<p>A potential advantage to this granularity is the distribution of complexity so
that an operator can more gently transition toward a deeper understanding of
the finer parts that makes up the solution to a problem.</p>

<center>
	<img src='../media/refs/slope.png' style='width:400px'/>
</center>

<img src='../media/refs/billard.png' style='width:120px; float:right;margin-left:15px'/>

<p><b>Designing for reversibility</b> is to make a system
approachable to a wide range of competency, lower the cost of errors, and
limit the blame put upon its operator, by favoring transformations that can be
undone.</p>

<p>Some automata conserve enough state through their transformation that
computation can happen backward, without cluttering large amount of memory with
<i>screenshots</i>.</p>

<center>
	<img src='../media/refs/pipe_both.png' style='width:75%'/>
</center>

<p>Familiar examples of reversible computation are the multiplication of a number
by a <a href='fractions.html'>fraction</a> and using the reciprocal to recover
that number, or the stack machine operation <i>rot</i>. The bitwise operator
<i>not</i> or the stack machine <i>swap</i> are <a
href='reversible_computing.html'>self-reversible examples</a>, which means that
same operator can applied once again to recover the earlier state.</p>

<img src='../media/refs/not.png' style='width:110px; float:right'/>

<ul>
	<li><a href='https://vine.dev/docs/features/inverse' target='_blank'>Inverse Operators</a>, Vine Language</li>
	<li><a href='../docs/baker_thermodynamics.html' target='_blank'>Thermodynamics of Garbage Collection</a>, Henry G. Baker</li>
	<li><a href='fractran.html#reversibility'>Undoing Register Machines</a>, Fractran</li>
</ul>

<!--
<img src='../media/refs/inets_add.png' width='50%'/>
-->

<p><b>Designing for concatenation</b> is using a point-free message passing
paradigm that does not identify the arguments on which it operates. It is
mentioned here as it might prove valuable in a <i>Deeply Malleable</i> system
as a way to combined both inspectability down to its the mechanical
transformation, and reasonable evaluation performance.</p>

<pre>
: SQUARED ( n -- n^2 ) DUP * ;
: CUBED ( n -- n^3 ) DUP SQUARED * ;
</pre>

<p>In such a system, nodes merely compose other nodes, among which are
combinators that manipulate the arguments, <i>regardless of context</i>. This is
a fancy way of saying that a concatenative sub-expression can be replaced with a
<b>name</b> that represents that same sub-expression.</p>

<pre>
: POPCNT ( n -- bits ) 0 swap
BEGIN dup WHILE tuck 1 AND + swap 1 rshift REPEAT
DROP ;
</pre>

<p>A maximally accessible system such that the finer details in movement of bits
are observable but that does not run on generic hardware would be paradoxical by
virtue of its inaccessibility. For that reason, depending on the host computer,
a function definition like the one above(which might exist as a single opcode),
should probably still be part of the observable system definitions even if it
is not evaluated.</p>

<p><b>Designing for differences</b> is to consider the compatibility between
wildly different interfaces and notations to support networks of people
collaborating, across many levels of competency, to make software work for
themselves and their communities.</p>

<p>The rewriting language <a
href='https://maude.cs.uiuc.edu/maude1/manual/maude-manual-html/maude-manual_31.html'
target='_blank'>Maude</a>, uses an <i>mixfix notation</i>, making the system
neither prefix, infix, or postfix, but adaptable to the user's needs and
background. To demonstrate something akin to the mixfix notation and give a
taste of rewriting, consider a system made of rules where a given <i>left-hand
side</i> is replaced by its corresponding <i>right-hand side</i>, and where
<code>?words</code> will match anything.</p>

<pre>
(add ?x ?y) -> (?x + ?y)
(?x ?y add) -> (?x + ?y)

((?a) + ?b) -> (?a + (?b))
(0 + ?b) -> (sum ?b)
</pre>
<pre style='margin-top:-29px'>
(add 1 2)
</pre>

<p>The first two rules of the program above both enable the translation between
prefix & postfix, to the infix notation, as well as transcribing the english
symbol <code>add</code> that could otherwise be localized.</p>

<ul>
	<li><a href='https://hedy.org' target='_blank'>Hedy</a>, multi-lingual PL.</li>
	<li><a href='https://nsl.com' target='_blank'>No Stinking Loops</a>, array notation.</li>
</ul>

<img src='../media/refs/canon_cat.jpg'/>

<ul>
	<li><a href='https://www.inkandswitch.com/essay/malleable-software' target='_blank'>Malleable Essay</a>, Ink & Switch</li>
	<li><a href='https://malleable.systems' target='_blank'>Malleable Systems</a>, forum</li>
</ul>
