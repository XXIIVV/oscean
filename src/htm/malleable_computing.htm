<h2>Imagining open computation that goes beyond open source, made from parts designed to be recombined.</h2>

<p>Every layer of a malleable computing system is designed to support arbitrary
recombination, reuse across environments and must be freely sharable with
others. Modifying a system should happen in the context of use, rather than
through some separate toolchain or skill set. People of all experience levels
must be able to retain ownership and control.</p>

<p>Finally, perhaps most importantly, malleable computing should be a
thoughtfully crafted, fun, and empowering experience in which someone willfully
choose to participate in.</p>

<img src='../media/refs/super_chair.png'/>

<p>At its core, a malleable system is made of non-homogeneous nodes capable of
exchanging information with each other. It is an attribute shared by different
interoperable systems catering to each individual's needs. Generally speaking,
a malleable program is part of a chain, and is itself also made of smaller
interconnected links. </p>

<pre>
input   -> transformation -> output.
11010 ..   00101..
<b>cat</b> file | filter          | output
</pre>

<table border="1">
	<tr><th colspan="4" style="text-align:center">Malleability</th></tr>
	<tr>
		<td style="background:black;color:white">Silo</td>
		<td>A system in which node will forcefully captures the input is a <b>silo</b>.</td>
	</tr>
	<tr>
		<td style="background:#a0ffa0;color:black">Shallow</td>
		<td>When data can enter and leave an infrastructure that itself is not malleable,
it is superficially malleable.</td>
	</tr>
	<tr>
		<td style="background:#4fdd9a;color:black">Average</td>
		<td>When messages flow freely between internal nodes of a malleable system, but
domains are restricted by operator competency.</td>
	</tr>
	<tr>
		<td style="background:#47c199;color:black">Deep</td>
		<td>When the notion of layers of abstraction has entirely vanished,
transformations are made seemlessly across all depths of the system.</td>
	</tr>
		
</table>


<h3>Units of Computation</h3>

<table border='1' style='float:right; margin-left:30px'>
	<tr><th colspan='2'>Even Check</th></tr>
	<tr><th>Message</th><th>Bit</th></tr>
	<tr style='font-family:mono'><td>1101 001</td><td>1</td></tr>
</table>

<p><b>Design for decay</b>: A message, as far as computers are concerned, is an anonymous stream of bits in transit. Error correction is done by transmitting additional information to catch information loss or tampering. For example, by adding a <i>parity bit</i> that corresponds to the odd or even number of active bits in a specific length of data.</p>

<article>
	<p>A <i>decay hardened quine</i> refers to a programming concept where a quine
program, a program that prints its own source code, is designed to be robust
against character corruption or "decay."</p>
</article>

<p>For a message to be interoperable, it should include enough information for the receiver to know how to use the information, but not too much as to clutter the signal.</p>

<pre>
0010100100100101 (header length: data:)
</pre>

<p><b>Design for diversity</b>: Some rewriting languages, like <a
href='https://maude.cs.uiuc.edu/maude1/manual/maude-manual-html/maude-manual_31.html'
target='_blank'>Maude</a>, uses a mixfix notation making the system neither
prefix, infix, or postfix, but adaptable to the user's needs and situation.</p>

<p><b>Design for reversibility</b>: Manually created save states allows to
navigate potentially destructive operations, for a system to be approachable
from a wide range of competency, the system might value minimizing
unrecoverable states. There is a way of designing computer programs that
ensures that any evaluation can be run backward.</p>

<img src='../media/refs/billard.png' style='width:140px; float:right;margin-left:15px'/>

<p>Various automata can preserve the information needed for computation to be
undone. A few common reversible examples are the multiplication of a number
by a fraction and using the reciprocal to recover that number, 
or the stack machine <i>rot</i>. The the bitwise
operator <i>not</i> or the stack machine <i>swap</i> are self-reversible examples,
in which the same operator can undo its own work.</p>

<p>If part of a system is composed of reversible atomic operations, these
localized transformation make that part of the system that much more
approachable. Computers expend energy to erase otherwise valueable state, it's
possible that more efficient computers in the future operate in a way that is
rigidly aligned with the natural laws of the universe, in which nothing is
truly destroyed.</p>

<center><img src='../media/refs/inets_add.png' width='50%'/></center>


<p>Concatenation is a form of malleability. Linear logic, reversability.</p>

<p>Interfacing with the physical world, by scanning to bring a picture in the
chain, and printing to get it out.</p>

<p>Computing should be a thoughtfully crafted, fun, and empowering experience.</p>

<p>We believe that technical infrastructures for malleable software will need to support sociotechnical systems of people working together, across many levels, to make software work for themselves and their communities.</p>

<p>(Currently working on this, come back tomorrow...)</p>




