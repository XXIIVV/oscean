<h2>Imagining open computation that goes beyond open source, made from parts designed to be recombined.</h2>

<p>Every layer of a malleable computing system is designed to support arbitrary
recombination, reuse across environments and must be freely sharable with
others. Modifying a system should happen in the context of use, rather than
through some separate toolchain or skill set. People of all experience levels
must be able to retain ownership and control.</p>

<p>Finally, perhaps most importantly, malleable computing should be a
thoughtfully crafted, and empowering experience in which someone willfully
choose to participate in.</p>

<img src='../media/refs/super_chair.png'/>

<p>At its core, a malleable system is made of non-homogeneous nodes capable of
exchanging <b>messages</b> with each other. It is an attribute shared by different
interoperable systems, not unlike programs that utilize <a
href='unix.html#pipes'>Unix pipes</a>, and at a smaller scale, some flow-based
programming environments.</p>

<p>Generally speaking, a malleable atom is part of a chain, and is itself also
made of equally interconnected links, nodes or agents.</p>

<pre>
input   -> transformation -> output.
cat file | filter          | output
11010..    00101..
</pre>

<table border="1">
	<tr><th colspan="4" style="text-align:center">Malleability</th></tr>
	<tr>
		<td style="background:black;color:white">Silo</td>
		<td>A system in which nodes will forcefully captures the message is a <b>silo</b>.</td>
	</tr>
	<tr>
		<td style="background:#a0ffa0;color:black">Shallow</td>
		<td>Messages can enter and leave a system that is not malleable itself,
this is malleability of a superficial kind.</td>
	</tr>
	<tr>
		<td style="background:#4fdd9a;color:black">Average</td>
		<td>Messages can flow freely between internal nodes of a malleable system, but
capabilties are restricted by domain, interface, or operator competency.</td>
	</tr>
	<tr>
		<td style="background:#47c199;color:black">Deep</td>
		<td>Messages can be passed seemlessly across every level of the system, the
division into <i>layers</i> has entirely vanished.</td>
	</tr>
</table>

<h3>Malleable Bit Streams</h3>

<table border='1' style='float:right; margin-left:30px'>
	<tr><th colspan='2'>Even Check</th></tr>
	<tr><th>Message</th><th>Bit</th></tr>
	<tr style='font-family:mono'><td>1101 001</td><td>1</td></tr>
</table>

<p><b>Design for decay</b>: A message, as far as computers are concerned, is an anonymous stream of bits in transit. Error correction is done by transmitting additional information to catch information loss or tampering. For example, by adding a <i>parity bit</i> that corresponds to the odd or even number of active bits in a specific length of data.</p>

<img src='../media/refs/arecibo.png' style='width:240px'/>

<p>For the Arecibo Message, since the reciever's capabilities are unknown, the
product of the message's dimension(73 rows by 23 columns) was chosen to be a
semiprime so it could be infered from an otherwise totally anonymous
message.</p>

<article>
	<p>A <i>decay hardened quine</i> refers to a programming concept where a quine
program, a program that prints its own source code, is designed to be robust
against character corruption or "decay."</p>
</article>

<img src='../media/refs/not.png' style='width:110px; float:right'/>

<p><b>Design for reversibility</b>: For a system to be approachable from a wide
range of competency, it might be valuable to minimize some unrecoverable states.
Manually created save states allow to navigate potentially destructive
operations, but there is a way of designing computer programs that ensures that
any evaluation can be run forward and backward.</p>

<img src='../media/refs/inets_add.png' width='50%'/>

<p>Various automata can preserve just enough information needed for computation to
be undone, without cluttering memory with <i>screenshots</i>. A few common
reversible examples are the multiplication of a number by a fraction and using
the reciprocal to recover that number, or the stack machine <i>rot</i>
operation. The bitwise operator <i>not</i> or the stack machine <i>swap</i>
are also self-reversible examples, in which the same operator can undo its own
work.</p>
<img src='../media/refs/billard.png' style='width:120px; float:right;margin-left:15px'/>

<p>If some parts of a system are composed of reversible atomic operations, these
localized transformation may make that part of the system that much more
approachable by reducing the cost of errors, and blame upon its operator.</p>

<h3>Malleable Payloads</h3>

<p><b>Design for concatenation</b>: A point-free message passing paradigm that
does not identify the arguments on which it operates might prove valuable in a
<i>Deeply Malleable</i> system would it value both inspectability down to its
the mechanical transformation, and reasonable evaluation performance.</p>

<pre>
: SQUARED  ( n -- n^2 ) DUP * ;
: CUBED  ( n -- n^3 ) DUP SQUARED * ;
</pre>

<p>In such a system, nodes merely compose other nodes, among which are
combinators that manipulate the arguments. All transformations are unary
application on a single stream. The reduction of any expression is the
simplification of one function to another function, <i>regarless of the
context</i>. This is a fancy way of saying that a concatenative subexpression
can be replaced with a <b>name</b> that represents that same subexpression.</p>

<pre>
: POPCNT ( n -- bits ) 0 swap
   BEGIN dup WHILE tuck 1 AND + swap 1 rshift REPEAT
   DROP ;
</pre>

<p>This subexpression is defined in terms of some system's
primitives, but may not actually get evaluated. It contains the definition of
the transformation in some language, but only as far needed so that it can be
matched and mapped onto an efficient acceleration, hardware or otherwise. In
the above case, a native machine instruction, without obfuscating its
meaning.</p>

<!--
A maximally accessible system such that the finer
details in movement of bits are observable but that does not run on generic
hardware would be paradoxal by virtue of its inaccessibility. -->

<h3>Malleable Notation</h3>

<p><b>Design for diversity</b>: For the technical infrastructures of malleable
software to support networks of people collaborating together, across many
levels of competancy, to make software work for themselves and their
communities. Such a system will surely be connecting wildly different
interfaces and notations.</p>

<p>The rewriting language <a
href='https://maude.cs.uiuc.edu/maude1/manual/maude-manual-html/maude-manual_31.html'
target='_blank'>Maude</a>, uses a <i>mixfix notation</i> making the system
neither prefix, infix, or postfix, but adaptable to the user's needs and
background. To demonstrate something akin to the mixfix notation and give a
taste of rewriting, consider a system made of rules where a given <i>left-hand
side</i> is replaced by its corresponding <i>right-hand side</i>, and where
<code>?words</code> will match anything.</p>

<pre>
(add ?x ?y) -> (?x + ?y)
(?x ?y add) -> (?x + ?y)

((?a) + ?b) -> (?a + (?b))
(0 + ?b)    -> (sum ?b)
</pre>
<pre style='margin-top:-29px'>
(add 1 2)
</pre>

<p>The first two rules of program above both enable the translation between
prefix & postfix, to the infix notation, as well as translating a symbol that
might otherwise be localized.</p>

<p>(Currently working on this, come back tomorrow...)</p>




