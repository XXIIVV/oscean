<h2>Software versioning in which a version is an integer in degrees Kelvin. </h2>

<p>Absolute zero is <b>frozen</b> &mdash; no further updates are possible. If your
Kelvin versions don't track your actual progress, you run out of integers. </p>

<table border='1'>
	<tr><td colspan='3'>A</td><td>9K</td></tr>
	<tr><td></td><td colspan='2'>B</td><td>19K</td></tr>
	<tr><td></td><td></td><td colspan='1'>C</td><td>20K</td></tr>
	<tr><td></td><td></td><td colspan='1'>D</td><td>28K</td></tr>
</table>

<p>If tool B sits on platform A, either both A and B must be at absolute zero, or
B must be warmer than A. Whenever the temperature of platform A declines,
the temperature of tool B must also decline. Of course, if B itself is a
platform on which some higher-level tool C depends, it must follow the same
constraints recursively.</p>

<ol>
	<li>A's version <strong>SHALL</strong> be a nonnegative integer.</li>
	<li>A, at any specific version, <strong>MUST NOT</strong> be modified after release.</li>
	<li>At version 0, new versions of A <strong>MUST NOT</strong> be released.</li>
	<li>New releases of A <strong>MUST</strong> be assigned a new version, and this version <strong>MUST</strong> be strictly less than the previous one.</li>
	<li>If A supports another component B that also follows kelvin versioning, then:
		<ul>
		<li>Either both A and B <strong>MUST</strong> be at version 0, or B's version <strong>MUST</strong> be
		strictly greater than A's version.</li>
		<li>If a new version of A is released and that version supports B, then a new
		version of B <strong>MUST</strong> be released.</li>
		</ul>
	</li>
</ol>


