<h2>Uxntal Memory</h2>

<p>There are 64kb of <b>addressable memory</b>. Roms are loaded at 0x0100, which
is the address of the <a href='uxntal_devices.html'>reset vector</a>. During boot, the stacks, device and addressable memories are zeroed, if it is
a soft-reboot, the content of the zero-page is preserved.</p>

<ul>
	<li>The <b id='absolute'>Absolute</b> padding keyword, like <kbd>|100</kbd> moves
the program generation to an address specified by a number or label.</li>
	<li>The <b id='relative'>Relative</b> padding keyword, like <kbd>$18</kbd> moves
the program generation by a distance specified by a number or label.</li>
</ul>

<pre>
|18 @width
|100 @on-reset ( -> )
	;buffer/end BRK <span style='float:right'>02 18</span>
|200 @buffer $width &end
</pre>

<p>Once in
memory, a Uxn program can write over itself, it is not uncommon for a uxntal
program to self-modify for <a href='uxntal_doors.html'>storing variables</a>.
Memory is <i>big-endian</i>, when writing or reading a short from memory, the
position is that of the high-byte. The low-byte of a short written at 0xffff
wraps to 0x0000.</p>

<pre>
#12 #0200 STA <span style='float:right'>0x0200=12</span>
#3456 #0400 STA2 <span style='float:right'>0x0400=34, 0x0401=56</span>
#0400 LDA <span style='float:right'>34</span>
</pre>

<p>The <b>zero-page</b> is the memory located below 0x0100, its
purpose is to store variables that will be accessed often, or needs to be
preserved across a soft-reboot. It is sligthly faster to read and write from
the zero-page using the LDZ and STZ opcodes as they use only a single byte
instead of a short. This memory space cannot be pre-filled in the rom prior to
initialization. The low-byte of a short written at 0xff wraps to 0x00.</p>

<pre>
#1234 #80 STZ2 <span style='float:right'>0x0080=12, 0x0081=34</span>
#81 LDZ <span style='float:right'>34</span>
</pre>




