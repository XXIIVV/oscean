<h2>Concatenative languages use juxtaposition of expressions for function composition.</h2>

<img src="../media/refs/chesshire_head.png" width='140' style='float:right;margin-left:30px'>

<p>The point-free programming paradigm is where function definitions do not
identify the arguments on which they operate, all terms denote unary functions applied on a stack or a queue. </p>

<h3>Fizzbuzz, in <a href='uxntal.html'>Uxntal</a>.</h3>
<pre>
#6500
@fizzbuzz ( n i -- )
	#00
	OVR #03 DIVk MUL SUB ?{ INC
		LIT2 "F 18 DEO LIT2 "i 18 DEO LIT2 "z 18 DEOk DEO }
	OVR #05 DIVk MUL SUB ?{ INC
		LIT2 "B 18 DEO LIT2 "u 18 DEO LIT2 "z 18 DEOk DEO }
	?{ 
		DUP #0a DIVk #30 ADD #18 DEO
		DIVk MUL SUB #30 ADD #18 DEO }
	#0a18 DEO
	INC GTHk ?fizzbuzz POP2 BRK
</pre>

<!--
<p>A stack-oriented language, in which whitespace is composition, allows programs
to be interpreted and evaluated faster, since no syntax analysis is required,
only lexical analysis. Lexical analysis is the process of converting a sequence
of characters in a source code file into a sequence of tokens, and syntax
analysis is the validation of these tokens according to the rules of the
programming language. </p>

<img src='../media/refs/rpn.png' width='40' class='nodark' style='float:left;margin-right:15px; margin-top:15px'/>

<p>The <a href='notation.html'>postfix notation</a> is an economic way to express computations
<i>syntactically</i> as it has no precedence rules and the stack-passing
mechanism simplifies the handling of multiple return values.</p>

<h3>Properties of Concatenative Languages</h3>

<ul>
	<li>Concatenative languages are necessarily point-free as allowing terms to
denote variables would violate the rule that all terms denote functions.</li>
	<li>The reduction of any expression is the simplification of one function to
another function; it is never necessary to deal with the application of
functions to objects. This property separates them from the otherwise similar
function-level languages of John Backus, which are <a
href='functional.html'>applicative</a>.</li>
	<li>Any subexpression can be replaced with a name that represents the same
subexpression. This is referred to in the concatenative community as <i>factoring</i>.</li>
	<li>The syntax and semantics of concatenative languages form the algebraic
structure of a monoid.</li>
</ul>

<p>The corollary to the presence of stack operation in the code which have nothing
to do with the problem domain, like <i>pop</i>, <i>swap</i>, and <i>dup</i>;
are the <i>let</i> and label tokens.</p>

<q>Truth be told, the amount of good research into concatenative
languages is nearly non-existent. </q>

<h3>Bestiary</h3>

<table border='1' id='combinators'>
	<tr><th colspan='2'>Single Items</th></tr>
	<tr><th>drop/pop/zap</th><td>( a -- )</td></tr>
	<tr><th>nop</th><td>( a -- a )</td></tr>
	<tr><th>dup</th><td>( a -- a a )</td></tr>
	<tr><th>nip</th><td>( a b -- b )</td></tr>
	<tr><th>swap</th><td>( a b -- b a )</td></tr>
	<tr><th>over/peek</th><td>( a b -- a b a )</td></tr>
	<tr><th>tuck</th><td>( a b -- b a b )</td></tr>
	<tr><th>rot/dig</th><td>( a b c -- b c a )</td></tr>
	<tr><th>-rot/bury</th><td>( a b c -- c a b )</td></tr>
	<tr><th>poke/snatch</th><td>( a b c -- b c )</td></tr>
	<tr><th>flip/spin</th><td>( a b c -- c b a )</td></tr>
	<tr><th>roll</th><td>( a b c d -- b c d a )</td></tr>
	<tr><th>-roll</th><td>( a b c d -- d a b c )</td></tr>
	<tr><th colspan='2'>Quoted Items</th></tr>
	<tr><th>unit</th><td>( a -- [a] )</td></tr>
	<tr><th>identity</th><td>( [a] -- a )</td></tr>
	<tr><th>rep</th><td>( [a] -- a a )</td></tr>
	<tr><th>run</th><td>( [a] -- a [a] )</td></tr>
	<tr><th>cons</th><td>( a [b] -- [a b] )</td></tr>
	<tr><th>sons</th><td>( a [b] -- [a b] a )</td></tr>
	<tr><th>dip</th><td>( a [b] -- b a )</td></tr>
	<tr><th>cat/compose</th><td>( [a] [b] -- [a b] )</td></tr>
	<tr><th>sap</th><td>( [a] [b] -- b a )</td></tr>
	<tr><th>swat/prepose</th><td>( [a] [b] -- [b a] )</td></tr>
	<tr><th>take</th><td>( [a] [b] -- [b [a]] )</td></tr>
	<tr><th>tack</th><td>( [a] [b] -- [a [b]] )</td></tr>
	<tr><th>sip</th><td>( b [a] -- b a b )</td></tr>
	<tr><th>cake</th><td>( a [b] -- [a b] [b a] )</td></tr>
</table>

<p>A generalized stack operator <code>%abc</code>, is sometimes used to represent the transformation, for example, <code>%ba</code> is the same as <code>swap</code>, <code>%aa</code> is the same as <code>dup</code> and <code>%bab</code> is the same as <code>over</code>.</p>

<img src="../media/refs/catlang.png" alt="Catlang icon by CapitalEx" width='70'>

<style>
#combinators tr td:nth-child(2) { font-family:mono }
</style>

-->