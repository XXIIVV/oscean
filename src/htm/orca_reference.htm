<h2>The Orca operations Manual</h2>

<p>The base operators are present in every version of Orca, no matter the platform:</p>

<ul class='operators'>
  <li><code class='arithmtcs'>A</code> <b>add</b>(<em>a</em> b): Outputs sum of inputs.</li>
  <li><code class='arithmtcs'>B</code> <b>subtract</b>(<em>a</em> b): Outputs difference of inputs.</li>
  <li><code>C</code> <b>clock</b>(<em>rate</em> mod): Outputs modulo of frame.</li>
  <li><code>D</code> <b>delay</b>(<em>rate</em> mod): Bangs on modulo of frame.</li>
  <li><code class='cardinals'>E</code> <b>east</b>: Moves eastward, or bangs.</li>
  <li><code class='arithmtcs'>F</code> <b>if</b>(<em>a</em> b): Bangs if inputs are equal.</li>
  <li><code class='readwrite'>G</code> <b>generator</b>(<em>x</em> <em>y</em> <em>len</em>): Writes operands with offset.</li>
  <li><code>H</code> <b>hold</b>: Holds southward operand.</li>
  <li><code class='arithmtcs'>I</code> <b>increment</b>(<em>step</em> mod): Increments southward operand.</li>
  <li><code class='couplings'>J</code> <b>jumper</b>(<em>val</em>): Outputs northward operand.</li>
  <li><code class='variables'>K</code> <b>konkat</b>(<em>len</em>): Reads multiple variables.</li>
  <li><code class='arithmtcs'>L</code> <b>lesser</b>(<em>a</em> <em>b</em>): Outputs smallest of inputs.</li>
  <li><code class='arithmtcs'>M</code> <b>multiply</b>(<em>a</em> b): Outputs product of inputs.</li>
  <li><code class='cardinals'>N</code> <b>north</b>: Moves Northward, or bangs.</li>
  <li><code class='readwrite'>O</code> <b>read</b>(<em>x</em> <em>y</em> read): Reads operand with offset.</li>
  <li><code class='readwrite'>P</code> <b>push</b>(<em>len</em> <em>key</em> val): Writes eastward operand.</li>
  <li><code class='readwrite'>Q</code> <b>query</b>(<em>x</em> <em>y</em> <em>len</em>): Reads operands with offset.</li>
  <li><code class='arithmtcs'>R</code> <b>random</b>(<em>min</em> max): Outputs random value.</li>
  <li><code class='cardinals'>S</code> <b>south</b>: Moves southward, or bangs.</li>
  <li><code class='readwrite'>T</code> <b>track</b>(<em>key</em> <em>len</em> val): Reads eastward operand.</li>
  <li><code>U</code> <b>uclid</b>(<em>step</em> max): Bangs on Euclidean rhythm.</li>
  <li><code class='variables'>V</code> <b>variable</b>(<em>write</em> read): Reads and writes variable.</li>
  <li><code class='cardinals'>W</code> <b>west</b>: Moves westward, or bangs.</li>
  <li><code class='readwrite'>X</code> <b>write</b>(<em>x</em> <em>y</em> val): Writes operand with offset.</li>
  <li><code class='couplings'>Y</code> <b>yumper</b>(<em>val</em>): Outputs westward operand.</li>
  <li><code>Z</code> <b>lerp</b>(<em>rate</em> target): Transitions operand to input.</li>
  <li><code>*</code> <b>bang</b>: Bangs neighboring operands.</li>
  <li><code>#</code> <b>comment</b>: Holds a line.</li>
</ul>

<p>The special operators make use of a platform's devices, here are the suggested special operators:</p>

<ul class='operators'>
  <li><code class='readwrite'>$</code> <b>self</b>(cmd): Send a command to Orca, or load external file.</li>
  <li><code class='cardinals'>:</code> <b>midi</b>(ch oct note velocity*): Send a midi note.</li>
  <li><code class='cardinals'>!</code> <b>midi cc</b>(ch knob val): Send a midi control change.</li>
  <li><code class='cardinals'>;</code> <b>pitch</b>(<em>oct note</em>): Send pitch byte out.</li>
  <li><code class='cardinals'>/</code> <b>byte</b>(high low): Send a raw hexadecimal byte.</li>
  <li><code class='variables'>=</code> <b>play</b>(<em>ch oct note velocity*</em>): Play note with built-in synth.</li>
</ul>

<style>
  .operators li code { padding:0px 4px; border-radius: 2px }
  .readwrite { background:#72dec2; }
  .cardinals { background: #111; color: white; }
  .variables { background:#ffcf3f; }
  .couplings { background:#b5ecde; }
  .arithmtcs { background:#cccccc; }
</style>