<h2>Using program validation in Uxntal.</h2>

<p><a href='type_systems.html'>Type inference</a> in <a
href='uxntal.html'>Uxntal</a> is done by checking the <a
href='uxntal_notation.html'>stack effect notation</a> of words, against the sum
of stack changes predicted to occur based on the items in their bodies.</p>

<p>Words that do not pass the stack-checker are generating a warning, and so
essentially this defines a very basic and permissive type system that
nevertheless catches some invalid programs and enables compiler optimizations.
</p>

<pre>
@add ( <b style='color:red'>a*</b> b* -- c* ) <i>Warning: Imbalance in @add of +2</i>
	DUP2 ADD2
JMP2r
</pre>

<p>The simplest case is when a piece of code does not have any branches or
recursion, and merely pushes literals and calls words. Pushing a literal has
stack effect <code>( -- x )</code>. The stack effect of most words is always
known statically from the declaration.</p>

<p>A word calling a subroutine that would force an exit of the parent routine
with an imbalanced stack also triggers an error.</p>

<pre>
@routine ( a b -- c ) <i>Warning: Imbalance in @routine of +1</i>
	EQUk <b style='color:red'>?&sub-routine</b>
	POP2 #0a JMP2r
	&sub-routine ( a b -- c*</b> )
		POP2 #000b JMP2r
</pre>

<h3>Runtime Validation</h3>

<p>Lastly, a <b>runtime specific</b> solution to validate the stack state at any
one point during the execution of a program, is to read the <a
href='varvara.html#system'>System/wst</a> port and compare it against a given
stack pointer byte value. Note: that the value in the wst and rst ports include
the stack pointer byte.</p>

<pre>
@on-reset ( -> )
	#abcd DUP2 
	.System/wst DEI #05 EQU ?{
		#01 .System/debug DEO
		}
	BRK
</pre>

<ul>
	<li><a href='https://git.sr.ht/~rabbits/uxnbal' target='_blank'>Uxnbal</a>, Source</li>
</ul>

