<h2>Uxntal Opcodes</h2>

<p>Uxn supports 4 <a href='#immediate'>immediate opcodes</a>, and 32 standard
opcodes. The list below show the opcodes and their effect on a given stack
<kbd>a b c</kbd>, where <i>c</i> is the top of the stack. <b>PC</b>: Program
Counter, <b>|</b>: Return Stack, <b>[M]</b>: Memory, <b>[D+*]</b>: Device
Memory, <b>a8</b>: a byte, <b>a16</b>: a short.</p>

<pre>
<b>LIT</b> a b c [PC]
<b>JCI</b> a b (c8)PC+=[PC]
<b>JMI</b> a b c PC+=[PC]
<b>JSI</b> a b c | PC PC+=[PC]

<b>BRK</b> .        <b>EQU</b> a b==c          <b>LDZ</b> a b [c8]     <b>ADD</b> a b+c
<b>INC</b> a b c+1  <b>NEQ</b> a b!=c          <b>STZ</b> a [c8]=b     <b>SUB</b> a b-c
<b>POP</b> a b      <b>GTH</b> a b&gt;c           <b>LDR</b> a b [PC+c8]  <b>MUL</b> a b*c
<b>NIP</b> a c      <b>LTH</b> a b&lt;c           <b>STR</b> a [PC+c8]=b  <b>DIV</b> a b/c
<b>SWP</b> a c b    <b>JMP</b> a b PC+=c       <b>LDA</b> a b [c16]    <b>AND</b> a b&c
<b>ROT</b> b c a    <b>JCN</b> a (b8)PC+=c     <b>STA</b> a [c16]=b    <b>ORA</b> a b|c
<b>DUP</b> a b c c  <b>JSR</b> a b | PC PC+=c  <b>DEI</b> a b [D+c8]   <b>EOR</b> a b^c
<b>OVR</b> a b c b  <b>STH</b> a b | c         <b>DEO</b> a [D+c8]=b   <b>SFT</b> a b&gt;&gt;c8l&lt;&lt;c8h
</pre>

<h3 id='modes'>Modes</h3>

<p>Each opcode has 3 possible modes, which can combined:</p>

<ul>
	<li>The <b>short mode</b> <kbd>2</kbd> operates on shorts, instead of bytes.</li>
	<li>The <b>keep mode</b> <kbd>k</kbd> operates without consuming items.</li>
	<li>The <b>return mode</b> <kbd>r</kbd> operates on the return stack.</li>
</ul>

<table border='1' style='float:right'>
	<tr><th colspan='8'>INC2r</th></tr>
	<tr><th>k</th><th>r</th><th>2</th><th colspan='5'>opcode</th></tr>
	<tr><td>0</td><td class='highlight'>1</td><td class='highlight'>1</td>
	<td>0</td><td>0</td><td>0</td><td>0</td><td class='highlight'>1</td></tr>
</table>

<p>By default, operators consume bytes from the working stack, notice how in the following example only the last two bytes <code>#45</code> and <code>#67</code> are added, even if there are two shorts on the stack.</p>
<pre>#1234 #4567 ADD<span style='float:right'>12 34 ac</span></pre>

<p id='2_mode'>The <b>short mode</b> consumes two bytes from the stack. In the case of jump opcodes, the short-mode operation jumps to an absolute address in memory. For the memory accessing opcodes, the short mode operation indicates the size of the data to read and write.</p>
<pre>#1234 #4567 ADD2 <span style='float:right'>57 9b</span></pre>

<p id='k_mode'>The <b>keep mode</b> does not consume items from the stack, and pushes the result on top. The following example adds the two shorts together, but does not consume them. Under the hood, the keep mode keeps a temporary stack pointer that is decremented on <code>POP</code>.</p>
<pre>#1234 #4567 ADD2k <span style='float:right'>12 34 45 67 57 9b</pre>

<p id='r_mode'>The <b>return mode</b> makes it possible for any opcode to operate on the return-stack directly. For that reason, there is no dedicated return opcode. For example, the <code class='op'>JSR</code> opcode pushes the program's address onto the return stack before jumping, to return to that address, the <code class='op'>JMP2r</code> opcode is used, where instead of using the address on the working-stack, it takes its address from the return-stack.</p>
<pre>LITr 12 #34 STH ADDr STHr <span style='float:right'>46</span></pre>

<img src="../media/generic/uxn.crew.png" width="400"/>

<style>
	.highlight { background:#eee }
	@media (prefers-color-scheme:dark) {
		.highlight { background:#222 }
	}
</style>

<h3 id='immediate'>Immediate opcodes</h3>

<p>Immediate opcodes are operators that do not take items from the stack, but
read values stored <i>immediately</i> after the opcode in the program's memory.
Uxntal has 4 immediate opcodes: </p>

<ul>
	<li>The <b>literal</b> <kbd><a href='uxntal_reference.html#lit'>LIT</a></kbd>.</li>
	<li id='jmi'>The <b>jump</b> <kbd><a href='uxntal_reference.html#jmi'>!routine</a></kbd>, immediate of <kbd>JMP</kbd>.</li>
	<li id='jci'>The <b>conditional</b> <kbd><a href='uxntal_reference.html#jci'>?routine</a></kbd>, immediate of <kbd>JCN</kbd>.</li>
	<li>The <b>subroutine</b> <kbd><a href='uxntal_reference.html#jsi'>routine</a></kbd>, immediate of <kbd>JSR</kbd>.</li>
</ul>

<p>The immediate jump opcodes are slightly faster than their standard opcode
counterparts, but do not have modes and cannot be used to do pointer
arithmetic. The address value of the immediate opcodes are stored in memory as
relative shorts, enabling routines making use of these opcodes to be moved
around in the program's memory.</p>

<pre>
@fact <i>( n* -: res* )</i>
	ORAk ?{ POP2 #0001 JMP2r }
	DUP2 #0001 SUB2 fact MUL2
	JMP2r</pre>

<p>To learn more about each opcode, see the <a
href='uxntal_reference.html'>Opcode Reference</a>.</p>
