<h2>Uxntal Syntax</h2>

<p>In <a href='concatenative.html'>concatenative programming</a>, there are no
precedence rules, the calculations are merely performed in the sequence in
which they are presented. The order with which elements come off a stack is
known as <b>last in, first out</b>. In the stack <i>a b c</i>, the <i>c</i>
item was the last to be added, and will be the first to be removed.</p>

<pre>
#01 DUP ADD #03 MUL <i>( result: 06 )</i>
</pre>

<p>Comments are within parentheses, opcodes are uppercased, hexadecimal numbers
are lowercased. The <kbd>#</kbd> prefix indicates a literal number be pushed
onto the stack.</p>

<h3>Example Program</h3>

<p>The first line of our example begins with the padding token <kbd>|10</kbd>,
followed by definitions for <kbd>@labels</kbd>, <kbd>&sublabels</kbd> and
<kbd>$length</kbd> that aligns with the various ports of the <a
href='varvara.html#console'>Console device</a> so that we can reference it by
name in our program. To learn more, see <a href='uxntal_labels.html#structs'>Uxntal
Structs</a>.</p>

<article>
	<p>The following program is <b>not the most efficient way</b> of printing a
string, merely a length of code that covers most basic functionalities of the
language.</p>
</article>

<iframe src="../etc/uxnrepl/index.html" frameborder="0" class='frame'></iframe>

<style>
.example span.label { font-weight: bold;background: #fff;color: #000;padding: 2px 4px; }
.example span.comment { color:#777 }
.frame { overflow: hidden; height: 450px; margin-bottom: 15px; border-radius:5px }
</style>

<p>The second segment moves the program location to the address 0x0100, which is
where the first page of memory ends, and <a href='uxntal_memory.html'>where all
Uxn programs begin</a>. Next, inside parentheses, is a <b>comment</b> with the
arrow symbol indicating that the following operation is a vector. To learn
more, see <a href='uxntal_notation.html'>Uxntal Notation</a>.</p>

<pre>
@on-reset
0100:   a0 01 12   LIT2 my-string
0103:   60 00 01   JSI print-text
0106:   00         BRK
</pre>

<p>The <kbd>;my-string</kbd> token pushes an <b>absolute address</b>, made of
two bytes, pointing to a series of letters in memory. Values
pushed to the stack in this fashion are called a <i>literals</i>, as opposed to
values stored in memory which are called <i>immediates</i>. Next, we call the
<kbd>@print-text</kbd> routine.</p>

<p>Both <kbd>&while</kbd> and <kbd>@while</kbd> are ways to define <b>labels</b>,
but using the ampersand rune will prefix our new label with the name of the
last parent label, creating <kbd>@print-text/while</kbd>. To learn more, see <a
href='uxntal_labels.html#scope'>Label Scope</a>.</p>

<pre>
@print-text/while
0107:   94         LDAk
0108:   80 18      LIT 18
010a:   17         DEO
010b:   21         INC2
010c:   94         LDAk
010d:   20 ff f7   JCI print-text/while
0110:   22         POP2
0111:   6c         JMP2r
</pre>

<p>Next, the <a href='uxntal_opcodes.html#lda'><kbd>LDAk</kbd></a> opcode loads
the byte in memory found at that address; the <a href='ascii.html'>ASCII</a>
letter H, to the top of the stack. The <a href='uxntal_opcodes.html#modes'>k-mode</a>
indicates that the operation will not consume the address. That value is sent
to the <a href='varvara.html#console'>device port #18</a>, defined by our
Console label and its sublabels, with <a
href='uxntal_opcodes.html#deo'><kbd>DEO</kbd></a> which prints that character
to the terminal. To learn more, see <a
href='uxntal_devices.html'>Uxntal Devices</a>.</p>

<p>We then increment the absolute address found on top of the stack with <a
href='uxntal_opcodes.html#inc'><kbd>INC2</kbd></a>, we use the <a
href='uxntal_opcodes.html#modes'>2-mode</a> because the address is made of two bytes.
We load the byte at the incremented value and do a conditional immediate jump
with <kbd>?&while</kbd> for as long as the item on the stack is not zero. We
use <a href='uxntal_opcodes.html#pop'><kbd>POP2</kbd></a> to remove the address
on the stack and keep the stack clean at the end of the subroutine.</p>

<p>Lastly, we encounter <a href='uxntal_opcodes.html#jmp'><kbd>JMP2r</kbd></a>
which jumps to the absolute address that we left on the return stack when we
entered the <kbd>@print-text</kbd> subroutine.</p>

<img src="../media/generic/uxn.team.png" style="margin:0 auto 30px" width="300">

<p>To summarize, <a href='uxntal_notation.html'>comments</a> are within
parentheses, <a href='uxntal_numbers.html'>numbers</a> are lowercase hexdecimal
shorts or bytes, <a href='uxntal_opcodes.html'>opcodes</a> are uppercased reserved words, and <a
href='uxntal_labels.html#lambdas'>anonymous labels</a> are within curlies.
Runes are special characters at the start of a word that define its meaning,
here is the full list:</p>

<table border="1" id='runes'>
	<tr><th colspan="4">Padding Runes</th><th colspan="4">Number Rune</th></tr>
	<tr>
		<td><code>|</code></td><td><a href='uxntal_memory.html#absolute'>absolute</a></td>
		<td><code>$</code></td><td><a href='uxntal_memory.html#relative'>relative</a></td>
		<td><code>#</code></td><td colspan="3"><a href='uxntal_numbers.html'>literal number</a></td>
	</tr>
	<tr><th colspan="4">Label Runes</th><th colspan="4">Ascii Runes</th></tr>
	<tr>
		<td><code>@</code></td><td><a href='uxntal_labels.html#parent'>parent</a></td>
		<td><code>&</code></td><td><a href='uxntal_labels.html#child'>child</a></td>
		<td><code>&quot;</code></td><td colspan="3">raw ascii</td>
	</tr>
	<tr><th colspan="4">Addressing Runes</th><th colspan="4">Wrapping Runes</th></tr>
	<tr>
		<td><code>,</code></td><td>literal relative</td>
		<td><code>_</code></td><td>raw relative</td>
		<td><code>( )</code></td><td colspan='3'><a href='uxntal_notation.html#comments'>comment</a></td>
	<tr>
		<td><code>.</code></td><td>literal zero-page</td>
		<td><code>-</code></td><td>raw zero-page</td>
		<td><code>{ }</code></td><td colspan='3'><a href='uxntal_labels.html#lambdas'>lambda</a></td>
	</tr>
	<tr>
		<td><code>;</code></td><td>literal absolute</td>
		<td><code>=</code></td><td>raw absolute</td>
		<td><code>[ ]</code></td><td colspan='3'>ignored</td>
	</tr>
	<tr><th colspan="4">Immediate Runes</th><th colspan="4">Pre-processor Runes</th></tr>
	<tr>
		<td><code>!</code></td><td><a href='uxntal_opcodes.html#jmi'>jmi</a></td>
		<td><code>?</code></td><td><a href='uxntal_opcodes.html#jci'>jci</a></td>
		<td><code>%</code></td><td><a href='uxntal_macros.html'>macro</a></td>
		<td><code>~</code></td><td>include</td></tr>
	</tr>
</table>
