<h2>Rewriting languages are typically made of rules and an initial state.</h2>

<p>A program begins with a series of rules which define tokens to match, and the resulting transformation. When a rule consumes a specific token during the application, we'll call this token the <i>reagent</i>. When a rule utilizes a specific token that survives the rewrite, we'll call it the <i>catalyst</i>.</p>

<h3>Fizzbuzz, in <a href='modal.html'>Modal</a>.</h3>

<pre>
<> ((print-word ?:) ?i ?f ?b) ((print-line \n) ?i ?f ?b)
<> ((print-line ?:) ?i ?f ?b) ((?i) (?f) (?b))

<> (100 ?f ?b) (done.)
<> (?i 3 5)    ((print-word FizzBuzz) ?i 0 0)
<> (?i 3 ?b)   ((print-word Fizz) ?i 0 ?b)
<> (?i ?f 5)   ((print-word Buzz) ?i ?f 0)
<> (?i ?f ?b)  ((print-word ?i) ?i ?f ?b)

(0 0 0)
</pre>

<h3>Fizzbuzz, in <a href='fractran.html'>Fractran</a>.</h3>

<pre>
:: Fizz >
:: Buzz >
:: eval #i^100 >
:: eval f^3 b^5 > incr Fizz Buzz
:: eval f^3 > incr Fizz
:: eval b^5 > incr Buzz
:: eval > incr
:: incr > #i f b eval

incr
</pre>

<ul>
	<li><a href='pocket_rewriting.html'>Pocket Rewriting</a>, a multiset rewriting zine.</li>
	<li><a href='https://lists.sr.ht/~rabbits/horadric' target='_blank'>Horadric</a>, a rewriting mailing list.</li>
</ul>

<img src='../media/refs/rewrite_seele.png' style='width:120px'/>

<!--
<pre>
<i>rule</i>            swap ?x ?y -> ?y ?x
<i>accumulator</i>     swap foo bar
<i>transformation</i>  bar foo
</pre>

<p>When a rule consumes a specific token during the application, we'll call this token the <b>reagent</b>. When a rule utilizes a specific token that survives the rewrite, we'll call it the <b>catalyst</b>. </p>

<pre>
dup a   -> a a  <i>dup is a reagent</i>
sub a b -> sub  <i>sub is a catalyst</i>
</pre>

<h3>Bestiary</h3>

<table border='1'>
	<tr><th colspan='2'>Reducers</th></tr>
	<tr><th>erase</th><td><pre>a -></pre></td></tr>
	<tr><th>subtract</th><td><pre>a b -></pre></td></tr>
	<tr><th>join</th><td><pre>b c -> a</pre></td></tr>
	<tr><th>halve</th><td><pre>a a -> a</pre></td></tr>
	<tr><th colspan='2'>Movers</th></tr>
	<tr><th>move</th><td><pre>a -> b</pre></td></tr>
		<tr><th>ring(blink)</th><td><pre>a -> b
b -> a</pre></td></tr>
	<tr><th>ring</th><td><pre>a -> b
b -> c
c -> a</pre></td></tr>
	<tr><th colspan='2'>Growers</th></tr>
	<tr><th>duplicate</th><td><pre>a -> a a</pre></td></tr>
	<tr><th>double</th><td><pre>a -> b b</pre></td></tr>
	<tr><th>fork</th><td><pre>a -> b c</pre></td></tr>
</table>

-->