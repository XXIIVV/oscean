<h2>Binary numbers are a base 2 numeral system.</h2>

<p>A binary number is a number expressed in the base-2 numeral system, which
uses only two symbols: 0 and 1. Each digit is referred to as a bit. Because of
its straightforward implementation in digital electronic circuitry using logic
gates, the binary system is used by almost all modern computers and
computer-based devices.</p>

<ul>
  <li><b>Bit</b>: The smallest unit in computers. It is either a 1 or a 0.</li>
  <li><b>Nibble</b>: Half a byte, or 4 bits. </li>
  <li><b>Byte</b>: 8 bits together form one byte, a number from 0 to 255. Bits in a byte are numbered starting from the right at 0.</li>
  <li><b>Short</b>: Two bytes put together are 16 bits, forming a number from 0 to 65535. The low byte is the rightmost eight bits.</li>
  <li><b>Big Endian</b>: Stores data big-end first. When looking at multiple bytes, the first byte (lowest address) is the biggest.</li>
  <li><b>Little Endian</b>: Stores data little-end first. When looking at multiple bytes, the first byte is smallest.</li>
</ul>

<figure>
	<img src='../media/refs/binary2.png' width='200'/>
	<figcaption>Two of Leibniz's binary calculation examples</figcaption>
</figure>

<h3>Conversion</h3>

<p>Break down the binary value in chunks of 4, multiply each 1 by its equivalent value, either 8, 4, 2 or 1. Add the resulting numbers together to get the result. For example, the value 1100, or (8*1 + 4*1), is equal to C(decimal 12).</p>

<table border='1'>
  <tr><th colspan='8'><code>1101 0101(D5)</code></th></tr>
  <tr><td class='highlight'>1</td><td class='highlight'>1</td><td>0</td><td class='highlight'>1</td><td>0</td><td class='highlight'>1</td><td>0</td><td class='highlight'>1</td><td>Binary</td></tr>
  <tr><td class='highlight'>128</td><td class='highlight'>64</td><td>32</td><td class='highlight'>16</td><td>8</td><td class='highlight'>4</td><td>2</td><td class='highlight'>1</td><td>Values</td></tr>
  <tr><td class='highlight'>128</td><td class='highlight'>64</td><td></td><td class='highlight'>16</td><td></td><td class='highlight'>4</td><td></td><td class='highlight'>1</td><td>Result: 213</td></tr>
</table>

<h3>Binary Arithmetic</h3>

<p>In the first column, divide the first number by 2 by removing the last bit, until 1 is reached. In the second column, multiply by 2 by adding an extra bit of 0. The answer is found by adding the numbers in the second column with odd numbers in the first column. A binary number ending with 1 is odd.</p>

<table border='1'>
  <tr><th>35</th><th>19</th></tr>
  <tr class='highlight'><td><code>100011</code></td><td><code>     10011</code></td></tr>
  <tr class='highlight'><td><code> 10001</code></td><td><code>    100110</code></td></tr>
  <tr><td><code>  1000</code></td><td><code>   1001100</code></td></tr>
  <tr><td><code>   100</code></td><td><code>  10011000</code></td></tr>
  <tr><td><code>    10</code></td><td><code> 100110000</code></td></tr>
  <tr class='highlight'><td><code>     1</code></td><td><code>1001100000</code></td></tr>
  <tr><td></td><td><code>1010011001</code></td></tr>
</table>

<p>This example multiplies 35 by 19, to arrive at a result of 665. The result <code>1010011001</code> can be deconstucted as:</p>

<pre>10 1001 1001 = 1 + 8 + 16 + 128 + 512 = 665</pre>

<p>Binary numbers can be multiplied and divided by multiples of 2, by rotating one bit left to multiply by 2, or one bit right to divide by 2.</p>

<table border='1'>
  <tr><th colspan='2'>22</th><td>0</td><td>0</td><td>0</td><td class='highlight'>1</td><td>0</td><td class='highlight'>1</td><td class='highlight'>1</td><td>0</td></tr>
  <tr><th>44</th><th><code>ROL</code></th><td>0</td><td>0</td><td class='highlight'>1</td><td>0</td><td class='highlight'>1</td><td class='highlight'>1</td><td>0</td><td>0</td></tr>
  <tr><th>11</th><th><code>ROR</code></th><td>0</td><td>0</td><td>0</td><td>0</td><td class='highlight'>1</td><td>0</td><td class='highlight'>1</td><td class='highlight'>1</td></tr>
</table>

<h3 id='logic'>Binary Logic</h3>

<p><b>AND</b>, or "both", sets individual bits to 0. AND is useful for masking
bits, for example, to mask the high order bits of a value AND with $0F: $36 AND
$0F = $06. <b>ORA</b>(OR), or "either one or both", sets individual bits to 1.
OR is useful for setting a particular bit, for example, $80 OR $08 = $88.
<b>EOR</b>(XOR), or "one or the other but not both", inverts individual
bits.</p>

<table border='1'>
  <tr><td>input</td><td>output</td><td>AND</td><td>ORA</td><td>EOR</td></tr>
  <tr><td>0</td><td>1</td><td class='highlight'>0</td><td class='highlight'>1</td><td class='highlight'>1</td></tr>
  <tr><td>0</td><td>0</td><td class='highlight'>0</td><td class='highlight'>0</td><td class='highlight'>0</td></tr>
  <tr><td>1</td><td>1</td><td class='highlight'>1</td><td class='highlight'>1</td><td class='highlight'>0</td></tr>
  <tr><td>1</td><td>0</td><td class='highlight'>0</td><td class='highlight'>1</td><td class='highlight'>1</td></tr>
</table>

<p>To activate the 1st, 2nd and 4th bits:</p>

<table border='1'>
  <tr><td>0</td><td>0</td><td>0</td><td>0</td><td class='highlight'>1</td><td>0</td><td class='highlight'>1</td><td class='highlight'>1</td></tr>
</table>

<pre>
unsigned char num = 0;
num |= (1 << 0);
num |= (1 << 1);
num |= (1 << 3);
</pre>

<p>To deactivate the 1st, 4th and 6th bits:</p>

<table border='1'>
  <tr><td class='highlight'>1</td><td class='highlight'>1</td><td>0</td><td class='highlight'>1</td><td>0</td><td class='highlight'>1</td><td class='highlight'>1</td><td>0</td></tr>
</table>

<pre>
unsigned char num = 255;
num &= ~(1 << 0);
num &= ~(1 << 3);
num &= ~(1 << 5);
</pre>

<p>To read value of bit:</p>

<pre>(num >> bit) & 1;</pre>

<p>If Bit 7 is not set (as in the first example) the representation of signed and unsigned numbers is the same. However, when Bit 7 is set, the number is always negative. For this reason Bit 7 is sometimes called the sign bit.</p>

<table width="289" border="1">
  <tr><td >Binary</td><td>Unsigned</td><td>Signed</td></tr>
  <tr><td>0010 0011</td><td>35</td><td>35</td></tr>
  <tr><td>1010 0011</td><td>163</td><td>-93</td></tr>
  <tr><td>1111 1111</td><td>255</td><td>-1</td></tr>
  <tr><td>1000 0000</td><td>128</td><td>-128</td></tr>
</table>

<h4>Flipstick Logic</h4>

<p>Shea Zellweger designed an alphabet that encodes the logic relationships of
the binary table(and some more).</p>

<img src='../media/refs/xla.png'/>

<p>For example, (A & B) creates the <i>d-symbol</i>.</p>

<img src='../media/refs/xla_d.png' style='float:right'/>

<table border='1'>
	<tr><td>T</td><td><i>x</i></td><td>OR</td><td><i>ɥ</i></td></tr>
	<tr><td>NAND</td><td><i>h</i></td><td>XOR</td><td><i>z</i></td></tr>
	<tr><td>-></td><td><i>0xc</i></td><td>q</td><td><i>u</i></td></tr>
	<tr><td>NOT p</td><td><i>ↄ</i></td><td>NOT <-</td><td><i>b</i></td></tr>
	<tr><td><-</td><td><i>0xe</i></td><td>p</td><td><i>c</i></td></tr>
	<tr><td>NOT q</td><td><i>n</i></td><td>NOT -></td><td><i>q</i></td></tr>
	<tr><td><-></td><td><i>s</i></td><td>AND</td><td><i>d</i></td></tr>
	<tr><td>NOR</td><td><i>p</i></td><td>F</td><td><i>o</i></td></tr>
</table>


<h3>Fixed-Point</h3>

<p>A fixed-point number is a number that has a fixed number of digits after the decimal point. If, for example, we use 8 bits to store a number with decimal points, we could decide to store it this way. The high and low nibbles have the same resolution.</p>

<table border='1'>
  <tr><th colspan="4">Integer Part</th><th colspan="4">Decimal Points</th></tr>
  <tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><th>0.0</th></tr>
  <tr><td>0</td><td>0</td><td class='clr2'>1</td><td class='clr2'>1</td><td class='clr2'>1</td><td>0</td><td class='clr2'>1</td><td>0</td><th>3.a</th></tr>
  <tr><td>0</td><td class='clr2'>1</td><td>0</td><td>0</td><td>0</td><td class='clr2'>1</td><td>0</td><td class='clr2'>1</td><th>4.5</th></tr>
</table>

<p>To turn a regular integer into fixed point, shift left by the number of fractional bits(width << bits), and to turn a fixed point into integer, shift right by the number of fractional bits(width >> bits).</p>

<p>To multiply, you do the multiply, and then you shift right by the number of fractional bits.</p>

<pre>(3.8 * 2.0) >> 8</pre>

<p>To divide, you first shift the numerator left by the number of fractional bits, then you do the division.</p>

<pre>(3.8 << 8) / 2.0</pre>

<img src='../media/refs/binary.png'/>

<h3 id='stack'>Binary Stack Encoding</h3>

<p>A <a href='concatenative.html'>stack</a> of zeros and ones can be encoded in a single number by keeping with bit-shifting and incrementing.</p>

<ul>
	<li>Pushing a <kbd>0</kbd> onto the stack is equivalent to doubling the number.</li>
	<li>Pushing a <kbd>1</kbd> is equivalent to doubling and adding 1.</li>
	<li>Popping is equivalent to dividing by 2, where the remainder is the number.</li>
</ul>

<pre>
int
push(int stack, int bit) {
	return (stack << 1) + bit;
}

int
pop(int stack, int *acc) {
	*acc = stack & 0x1;
	return stack >> 1;
}

int
dup(int stack) {
	int a, res = pop(stack, &a);
	return push(push(res, a), a);
}

int
swap(int stack) {
	int a, b, res = pop(pop(stack, &a), &b);
	return push(push(res, a), b);
}

int
echo(int stack) {
	int bit;
	printf(" .. ");
	while(stack > 1)
		stack = pop(stack, &bit), printf("%d ", bit);
	printf("< \n");
	return stack;
}
</pre>

<p>The above defines the primitives of a small stack machine that utilizes a single number as memory, this strategy is at the core of the <a href='fractran.html#stack'>Fractran stack machine</a>.</p>
<pre>
echo(dup(swap(push(push(push(push(1, 0), 1), 0), 1))));

<i>0 1 0 1 swap dup .</i>
</pre>

<table border='1'>
	<tr><th>16</th><td>.. 0 0 0 0 </td> <th>17</th><td>.. 1 0 0 0 </td></tr>
	<tr><th>24</th><td>.. 0 0 0 1 </td> <th>25</th><td>.. 1 0 0 1 </td></tr>
	<tr><th>20</th><td>.. 0 0 1 0 </td> <th>21</th><td>.. 1 0 1 0 </td></tr>
	<tr><th>28</th><td>.. 0 0 1 1 </td> <th>29</th><td>.. 1 0 1 1 </td></tr>
	<tr><th>18</th><td>.. 0 1 0 0 </td> <th>19</th><td>.. 1 1 0 0 </td></tr>
	<tr><th>26</th><td>.. 0 1 0 1 </td> <th>27</th><td>.. 1 1 0 1 </td></tr>
	<tr><th>22</th><td>.. 0 1 1 0 </td> <th>23</th><td>.. 1 1 1 0 </td></tr>
	<tr><th>30</th><td>.. 0 1 1 1 </td> <th>31</th><td>.. 1 1 1 1 </td></tr>
</table>

<style>
.highlight { background:#ddd }

@media (prefers-color-scheme: dark) {
  .highlight {
    background: #222;
  }
}
</style>
